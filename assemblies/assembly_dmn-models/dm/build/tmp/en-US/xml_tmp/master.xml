<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE book [
<!ENTITY % sgml.features "IGNORE">
<!ENTITY % xml.features "INCLUDE">
<!ENTITY % DOCBOOK_ENTS PUBLIC "-//OASIS//ENTITIES DocBook Character Entities V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/dbcentx.mod">
%DOCBOOK_ENTS;
]>
<?asciidoc-toc?><?asciidoc-numbered?><book xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0">
<info>
<title>Designing a decision service using DMN models</title><subtitle>
</subtitle>

<date>2019-09-05</date>
<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="Author_Group.xml"/>
<authorinitials>RC</authorinitials>
<productname>Red Hat Decision Manager</productname>
<productnumber>7.5</productnumber>
<abstract>
<para>This document describes how to implement Decision Model and Notation (DMN) models in your decision services in Red Hat Decision Manager 7.5.</para>
</abstract>
<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="Common_Content/Legal_Notice.xml"/>
</info>
<preface>
<title>Preface</title>
<simpara>As a business analyst or business rules developer, you can use Decision Model and Notation (DMN) to model a decision service graphically in a decision requirements diagram (DRD). This diagram consists of one or more decision requirements graphs (DRGs) that trace business decisions from start to finish, with each decision node using logic defined in DMN boxed expressions such as decision tables. Red Hat Decision Manager provides design and runtime support for DMN 1.2 models at conformance level 3. You can design your DMN models directly in Business Central or import existing DMN models into your Red Hat Decision Manager projects for deployment and execution.</simpara>
<simpara>For more information about DMN, see the Object Management Group (OMG) <link xlink:href="https://www.omg.org/spec/DMN">Decision Model and Notation specification</link>.</simpara>
</preface>
<chapter xml:id="dmn-con_dmn-models">
<title>Decision Model and Notation (DMN)</title>
<simpara>Decision Model and Notation (DMN) is a standard established by the Object Management Group (OMG) for describing and modeling operational decisions. DMN defines an XML schema that enables DMN models to be shared between DMN-compliant platforms and across organizations so that business analysts and business rules developers can collaborate in designing and implementing DMN decision services. The DMN standard is similar to and can be used together with the Business Process Model and Notation (BPMN) standard for designing and modeling business processes.</simpara>
<simpara>For more information about the background and applications of DMN, see the OMG <link xlink:href="https://www.omg.org/spec/DMN">Decision Model and Notation specification</link>.</simpara>
<section xml:id="dmn-conformance-levels-con_dmn-models">
<title>DMN conformance levels</title>
<simpara>The DMN specification defines three incremental levels of conformance in a software implementation. A product that claims compliance at one level must also be compliant with any preceding levels. For example, a conformance level 3 implementation must also include the supported components in conformance levels 1 and 2. For the formal definitions of each conformance level, see the OMG <link xlink:href="https://www.omg.org/spec/DMN">Decision Model and Notation specification</link>.</simpara>
<simpara>The following list summarizes the three DMN conformance levels:</simpara>
<variablelist>
<varlistentry>
<term>Conformance level 1</term>
<listitem>
<simpara>A DMN conformance level 1 implementation supports decision requirement diagrams (DRDs), decision logic, and decision tables, but decision models are not executable. Any language can be used to define the expressions, including natural, unstructured languages.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Conformance level 2</term>
<listitem>
<simpara>A DMN conformance level 2 implementation includes the requirements in conformance level 1, and supports Simplified Friendly Enough Expression Language (S-FEEL) expressions and fully executable decision models.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Conformance level 3</term>
<listitem>
<simpara>A DMN conformance level 3 implementation includes the requirements in conformance levels 1 and 2, and supports Friendly Enough Expression Language (FEEL) expressions, the full set of boxed expressions, and fully executable decision models.</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>Red Hat Decision Manager provides design and runtime support for DMN 1.2 models at conformance level 3. You can design your DMN models directly in Business Central or import existing DMN models into your Red Hat Decision Manager projects for deployment and execution.</simpara>
</section>
<section xml:id="dmn-drd-components-ref_dmn-models">
<title>DMN decision requirements diagram (DRD) components</title>
<simpara>A decision requirements diagram (DRD) is a visual representation of your DMN model. This diagram consists of one or more decision requirements graphs (DRGs) that represent a particular domain of an overall DRD. The DRGs trace business decisions using decision nodes, business knowledge models, sources of business knowledge, input data, and decision services.</simpara>
<simpara>The following table summarizes the components in a DRD:</simpara>
<table frame="all" rowsep="1" colsep="1">
<title>DRD components</title>
<tgroup cols="4">
<colspec colname="col_1" colwidth="20*"/>
<colspec colname="col_2" colwidth="20*"/>
<colspec colname="col_3" colwidth="40*"/>
<colspec colname="col_4" colwidth="20*"/>
<thead>
<row>
<entry align="left" valign="top" namest="col_1" nameend="col_2">Component</entry>
<entry align="left" valign="top">Description</entry>
<entry align="left" valign="top">Notation</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top" morerows="4"><simpara>Elements</simpara></entry>
<entry align="left" valign="top"><simpara>Decision</simpara></entry>
<entry align="left" valign="top"><simpara>Node where one or more input elements determine an output based on defined decision logic.</simpara></entry>
<entry align="left" valign="top"><informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/_images/dmn/dmn-decision-node.png"/>
</imageobject>
<textobject><phrase>dmn decision node</phrase></textobject>
</mediaobject>
</informalfigure></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Business knowledge model</simpara></entry>
<entry align="left" valign="top"><simpara>Reusable function with one or more decision elements. Decisions that have the same logic but depend on different sub-input data or sub-decisions use business knowledge models to determine which procedure to follow.</simpara></entry>
<entry align="left" valign="top"><informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/_images/dmn/dmn-bkm-node.png"/>
</imageobject>
<textobject><phrase>dmn bkm node</phrase></textobject>
</mediaobject>
</informalfigure></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Knowledge source</simpara></entry>
<entry align="left" valign="top"><simpara>External authorities, documents, committees, or policies that regulate a decision or business knowledge model. Knowledge sources are references to real-world factors rather than executable business rules.</simpara></entry>
<entry align="left" valign="top"><informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/_images/dmn/dmn-knowledge-source-node.png"/>
</imageobject>
<textobject><phrase>dmn knowledge source node</phrase></textobject>
</mediaobject>
</informalfigure></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Input data</simpara></entry>
<entry align="left" valign="top"><simpara>Information used in a decision node or a business knowledge model. Input data usually includes business-level concepts or objects relevant to the business, such as loan applicant data used in a lending strategy.</simpara></entry>
<entry align="left" valign="top"><informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/_images/dmn/dmn-input-data-node.png"/>
</imageobject>
<textobject><phrase>dmn input data node</phrase></textobject>
</mediaobject>
</informalfigure></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Decision service</simpara></entry>
<entry align="left" valign="top"><simpara>Top-level decision containing a set of reusable decisions published as a service for invocation. A decision service can be invoked from an external application or a BPMN business process.</simpara></entry>
<entry align="left" valign="top"><informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/_images/dmn/dmn-decision-service-node.png"/>
</imageobject>
<textobject><phrase>dmn decision service node</phrase></textobject>
</mediaobject>
</informalfigure></entry>
</row>
<row>
<entry align="left" valign="top" morerows="2"><simpara>Requirement connectors</simpara></entry>
<entry align="left" valign="top"><simpara>Information requirement</simpara></entry>
<entry align="left" valign="top"><simpara>Connection from an input data node or decision node to another decision node that requires the information.</simpara></entry>
<entry align="left" valign="top"><informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/_images/dmn/dmn-info-connector.png"/>
</imageobject>
<textobject><phrase>dmn info connector</phrase></textobject>
</mediaobject>
</informalfigure></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Knowledge requirement</simpara></entry>
<entry align="left" valign="top"><simpara>Connection from a business knowledge model to a decision node or to another business knowledge model that invokes the decision logic.</simpara></entry>
<entry align="left" valign="top"><informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/_images/dmn/dmn-knowledge-connector.png"/>
</imageobject>
<textobject><phrase>dmn knowledge connector</phrase></textobject>
</mediaobject>
</informalfigure></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Authority requirement</simpara></entry>
<entry align="left" valign="top"><simpara>Connection from an input data node or a decision node to a dependent knowledge source or from a knowledge source to a decision node, business knowledge model, or another knowledge source.</simpara></entry>
<entry align="left" valign="top"><informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/_images/dmn/dmn-authority-connector.png"/>
</imageobject>
<textobject><phrase>dmn authority connector</phrase></textobject>
</mediaobject>
</informalfigure></entry>
</row>
<row>
<entry align="left" valign="top" morerows="1"><simpara>Artifacts</simpara></entry>
<entry align="left" valign="top"><simpara>Text annotation</simpara></entry>
<entry align="left" valign="top"><simpara>Explanatory note associated with an input data node, decision node, business knowledge model, or knowledge source.</simpara></entry>
<entry align="left" valign="top"><informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/_images/dmn/dmn-annotation-node.png"/>
</imageobject>
<textobject><phrase>dmn annotation node</phrase></textobject>
</mediaobject>
</informalfigure></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Association</simpara></entry>
<entry align="left" valign="top"><simpara>Connection from an input data node, decision node, business knowledge model, or knowledge source to a text annotation.</simpara></entry>
<entry align="left" valign="top"><informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/_images/dmn/dmn-association-connector.png"/>
</imageobject>
<textobject><phrase>dmn association connector</phrase></textobject>
</mediaobject>
</informalfigure></entry>
</row>
</tbody>
</tgroup>
</table>
<simpara>The following table summarizes the permitted connectors between DRD elements:</simpara>
<table frame="all" rowsep="1" colsep="1">
<title>DRD connector rules</title>
<tgroup cols="4">
<colspec colname="col_1" colwidth="20*"/>
<colspec colname="col_2" colwidth="20*"/>
<colspec colname="col_3" colwidth="20*"/>
<colspec colname="col_4" colwidth="40*"/>
<thead>
<row>
<entry align="left" valign="top">Starts from</entry>
<entry align="left" valign="top">Connects to</entry>
<entry align="left" valign="top">Connection type</entry>
<entry align="left" valign="top">Example</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>Decision</simpara></entry>
<entry align="left" valign="top"><simpara>Decision</simpara></entry>
<entry align="left" valign="top"><simpara>Information requirement</simpara></entry>
<entry align="left" valign="top"><informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/_images/dmn/dmn-decision-to-decision.png"/>
</imageobject>
<textobject><phrase>dmn decision to decision</phrase></textobject>
</mediaobject>
</informalfigure></entry>
</row>
<row>
<entry align="left" valign="top" morerows="1"><simpara>Business knowledge model</simpara></entry>
<entry align="left" valign="top"><simpara>Decision</simpara></entry>
<entry align="left" valign="top" morerows="1"><simpara>Knowledge requirement</simpara></entry>
<entry align="left" valign="top"><informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/_images/dmn/dmn-bkm-to-decision.png"/>
</imageobject>
<textobject><phrase>dmn bkm to decision</phrase></textobject>
</mediaobject>
</informalfigure></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Business knowledge model</simpara></entry>
<entry align="left" valign="top"><informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/_images/dmn/dmn-bkm-to-bkm.png"/>
</imageobject>
<textobject><phrase>dmn bkm to bkm</phrase></textobject>
</mediaobject>
</informalfigure></entry>
</row>
<row>
<entry align="left" valign="top" morerows="1"><simpara>Decision service</simpara></entry>
<entry align="left" valign="top"><simpara>Decision</simpara></entry>
<entry align="left" valign="top" morerows="1"><simpara>Knowledge requirement</simpara></entry>
<entry align="left" valign="top"><informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/_images/dmn/dmn-decision-service-to-decision.png"/>
</imageobject>
<textobject><phrase>dmn decision service to decision</phrase></textobject>
</mediaobject>
</informalfigure></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Business knowledge model</simpara></entry>
<entry align="left" valign="top"><informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/_images/dmn/dmn-decision-service-to-bkm.png"/>
</imageobject>
<textobject><phrase>dmn decision service to bkm</phrase></textobject>
</mediaobject>
</informalfigure></entry>
</row>
<row>
<entry align="left" valign="top" morerows="1"><simpara>Input data</simpara></entry>
<entry align="left" valign="top"><simpara>Decision</simpara></entry>
<entry align="left" valign="top"><simpara>Information requirement</simpara></entry>
<entry align="left" valign="top"><informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/_images/dmn/dmn-input-to-decision.png"/>
</imageobject>
<textobject><phrase>dmn input to decision</phrase></textobject>
</mediaobject>
</informalfigure></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Knowledge source</simpara></entry>
<entry align="left" valign="top"><simpara>Authority requirement</simpara></entry>
<entry align="left" valign="top"><informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/_images/dmn/dmn-input-to-knowledge-source.png"/>
</imageobject>
<textobject><phrase>dmn input to knowledge source</phrase></textobject>
</mediaobject>
</informalfigure></entry>
</row>
<row>
<entry align="left" valign="top" morerows="2"><simpara>Knowledge source</simpara></entry>
<entry align="left" valign="top"><simpara>Decision</simpara></entry>
<entry align="left" valign="top" morerows="2"><simpara>Authority requirement</simpara></entry>
<entry align="left" valign="top"><informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/_images/dmn/dmn-knowledge-source-to-decision.png"/>
</imageobject>
<textobject><phrase>dmn knowledge source to decision</phrase></textobject>
</mediaobject>
</informalfigure></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Business knowledge model</simpara></entry>
<entry align="left" valign="top"><informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/_images/dmn/dmn-knowledge-source-to-bkm.png"/>
</imageobject>
<textobject><phrase>dmn knowledge source to bkm</phrase></textobject>
</mediaobject>
</informalfigure></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Knowledge source</simpara></entry>
<entry align="left" valign="top"><informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/_images/dmn/dmn-knowledge-source-to-knowledge-source.png"/>
</imageobject>
<textobject><phrase>dmn knowledge source to knowledge source</phrase></textobject>
</mediaobject>
</informalfigure></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Decision</simpara></entry>
<entry align="left" valign="top" morerows="3"><simpara>Text annotation</simpara></entry>
<entry align="left" valign="top" morerows="3"><simpara>Association</simpara></entry>
<entry align="left" valign="top"><informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/_images/dmn/dmn-decision-to-annotation.png"/>
</imageobject>
<textobject><phrase>dmn decision to annotation</phrase></textobject>
</mediaobject>
</informalfigure></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Business knowledge model</simpara></entry>
<entry align="left" valign="top"><informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/_images/dmn/dmn-bkm-to-annotation.png"/>
</imageobject>
<textobject><phrase>dmn bkm to annotation</phrase></textobject>
</mediaobject>
</informalfigure></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Knowledge source</simpara></entry>
<entry align="left" valign="top"><informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/_images/dmn/dmn-knowledge-source-to-annotation.png"/>
</imageobject>
<textobject><phrase>dmn knowledge source to annotation</phrase></textobject>
</mediaobject>
</informalfigure></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Input data</simpara></entry>
<entry align="left" valign="top"><informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/_images/dmn/dmn-input-to-annotation.png"/>
</imageobject>
<textobject><phrase>dmn input to annotation</phrase></textobject>
</mediaobject>
</informalfigure></entry>
</row>
</tbody>
</tgroup>
</table>
<simpara>The following example DRD illustrates some of these DMN components in practice:</simpara>
<figure>
<title>Example DRD: Loan prequalification</title>
<mediaobject>
<imageobject>
<imagedata fileref="images/_images/dmn/dmn-example-drd.png"/>
</imageobject>
<textobject><phrase>dmn example drd</phrase></textobject>
</mediaobject>
</figure>
<simpara>The following example DRD illustrates DMN components that are part of a reusable decision service:</simpara>
<figure>
<title>Example DRD: Phone call handling as a decision service</title>
<mediaobject>
<imageobject>
<imagedata fileref="images/_images/dmn/dmn-example-drd3.png" contentwidth="90%"/>
</imageobject>
<textobject><phrase>dmn example drd3</phrase></textobject>
</mediaobject>
</figure>
<simpara>In a DMN decision service node, the decision nodes in the bottom segment incorporate input data from outside of the decision service to arrive at a final decision in the top segment of the decision service node. The resulting top-level decisions from the decision service are then implemented in any subsequent decisions or business knowledge requirements of the DMN model. You can reuse DMN decision services in other DMN models to apply the same decision logic with different input data and different outgoing connections.</simpara>
</section>
<section xml:id="dmn-feel-con_dmn-models">
<title>Rule expressions in FEEL</title>
<simpara>Friendly Enough Expression Language (FEEL) is an expression language defined by the Object Management Group (OMG) DMN specification. FEEL expressions define the logic of a decision in a DMN model. FEEL is designed to facilitate both decision modeling and execution by assigning semantics to the decision model constructs. FEEL expressions in decision requirements diagrams (DRDs) occupy table cells in boxed expressions for decision nodes and business knowledge models.</simpara>
<simpara>For more information about FEEL in DMN, see the OMG <link xlink:href="https://www.omg.org/spec/DMN">Decision Model and Notation specification</link>.</simpara>
<section xml:id="dmn-names-con_dmn-models">
<title>Variable and function names in FEEL</title>
<simpara>Unlike many traditional expression languages, Friendly Enough Expression Language (FEEL) supports spaces and a few special characters as part of variable and function names. A FEEL name must start with a <literal>letter</literal>, <literal>?</literal>, or <literal>_</literal> element. The unicode letter characters are also allowed. Variable names cannot start with a language keyword, such as <literal>and</literal>, <literal>true</literal>, or <literal>every</literal>. The remaining characters in a variable name can be any of the starting characters, as well as <literal>digits</literal>, white spaces, and special characters such as <literal>+</literal>, <literal>-</literal>, <literal>/</literal>, <literal>*</literal>, <literal>'</literal>, and <literal>.</literal>.</simpara>
<simpara>For example, the following names are all valid FEEL names:</simpara>
<itemizedlist>
<listitem>
<simpara>Age</simpara>
</listitem>
<listitem>
<simpara>Birth Date</simpara>
</listitem>
<listitem>
<simpara>Flight 234 pre-check procedure</simpara>
</listitem>
</itemizedlist>
<simpara>Several limitations apply to variable and function names in FEEL:</simpara>
<variablelist>
<varlistentry>
<term>Ambiguity</term>
<listitem>
<simpara>The use of spaces, keywords, and other special characters as part of names can make FEEL ambiguous. The ambiguities are resolved in the context of the expression, matching names from left to right. The parser resolves the variable name as the longest name matched in scope. You can use <literal>( )</literal> to disambiguate names if necessary.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Spaces in names</term>
<listitem>
<simpara>The DMN specification limits the use of spaces in FEEL names. According to the DMN specification, names can contain multiple spaces but not two consecutive spaces.</simpara>
<simpara>In order to make the language easier to use and avoid common errors due to spaces, Red Hat Decision Manager removes the limitation on the use of consecutive spaces. Red Hat Decision Manager supports variable names with any number of consecutive spaces, but normalizes them into a single space. For example, the variable references <literal>First Name</literal> with one space and <literal>First  Name</literal> with two spaces are both acceptable in Red Hat Decision Manager.</simpara>
<simpara>Red Hat Decision Manager also normalizes the use of other white spaces, like the non-breakable white space that is common in web pages, tabs, and line breaks. From a Red Hat Decision Manager FEEL engine perspective, all of these characters are normalized into a single white space before processing.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>The keyword <literal>in</literal></term>
<listitem>
<simpara>The keyword <literal>in</literal> is the only keyword in the language that cannot be used as part of a variable name. Although the specifications allow the use of keywords in the middle of variable names, the use of <literal>in</literal> in variable names conflicts with the grammar definition of <literal>for</literal>, <literal>every</literal> and <literal>some</literal> expression constructs.</simpara>
</listitem>
</varlistentry>
</variablelist>
</section>
<section xml:id="dmn-data-types-ref_dmn-models">
<title>Data types in FEEL</title>
<simpara>Friendly Enough Expression Language (FEEL) supports the following data types:</simpara>
<itemizedlist>
<listitem>
<simpara>Numbers</simpara>
</listitem>
<listitem>
<simpara>Strings</simpara>
</listitem>
<listitem>
<simpara>Boolean values</simpara>
</listitem>
<listitem>
<simpara>Dates</simpara>
</listitem>
<listitem>
<simpara>Time</simpara>
</listitem>
<listitem>
<simpara>Date and time</simpara>
</listitem>
<listitem>
<simpara>Days and time duration</simpara>
</listitem>
<listitem>
<simpara>Years and months duration</simpara>
</listitem>
<listitem>
<simpara>Functions</simpara>
</listitem>
<listitem>
<simpara>Contexts</simpara>
</listitem>
<listitem>
<simpara>Ranges (or intervals)</simpara>
</listitem>
<listitem>
<simpara>Lists</simpara>
</listitem>
</itemizedlist>
<note>
<simpara>The DMN specification currently does not provide an explicit way of declaring a variable as a <literal>function</literal>, <literal>context</literal>, <literal>range</literal>, or <literal>list</literal>, but Red Hat Decision Manager extends the DMN built-in types to support variables of these types.</simpara>
</note>
<simpara>The following list describes each data type:</simpara>
<variablelist>
<varlistentry>
<term>Numbers</term>
<listitem>
<simpara>Numbers in FEEL are based on the <link xlink:href="http://ieeexplore.ieee.org/document/4610935/">IEEE 754-2008</link> Decimal 128 format, with 34 digits of precision. Internally, numbers are represented in Java as <link xlink:href="https://docs.oracle.com/javase/8/docs/api/java/math/BigDecimal.html"><literal>BigDecimals</literal></link> with <literal>MathContext DECIMAL128</literal>. FEEL supports only one number data type, so the same type is used to represent both integers and floating
point numbers.</simpara>
<simpara>FEEL numbers use a dot (<literal>.</literal>) as a decimal separator. FEEL does not support <literal>-INF</literal>, <literal>+INF</literal>, or <literal>NaN</literal>. FEEL uses
<literal>null</literal> to represent invalid numbers.</simpara>
<simpara>Red Hat Decision Manager extends the DMN specification and supports additional number notations:</simpara>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong">Scientific:</emphasis> You can use scientific notation with the suffix <literal>e&lt;exp&gt;</literal> or <literal>E&lt;exp&gt;</literal>. For example, <literal>1.2e3</literal> is the same as writing the
expression <literal>1.2*10**3</literal>, but is a literal instead of an expression.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Hexadecimal:</emphasis> You can use hexadecimal numbers with the prefix <literal>0x</literal>. For example, <literal>0xff</literal> is the same as the decimal
number <literal>255</literal>. Both uppercase and lowercase letters are supported. For example, <literal>0XFF</literal> is the same as <literal>0xff</literal>.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Type suffixes:</emphasis> You can use the type suffixes <literal>f</literal>, <literal>F</literal>, <literal>d</literal>, <literal>D</literal>, <literal>l</literal>, and <literal>L</literal>. These suffixes are ignored.</simpara>
</listitem>
</itemizedlist>
</listitem>
</varlistentry>
<varlistentry>
<term>Strings</term>
<listitem>
<simpara>Strings in FEEL are any sequence of characters delimited by double quotation marks.</simpara>
<simpara>Example:</simpara>
<screen>"John Doe"</screen>
</listitem>
</varlistentry>
<varlistentry>
<term>Boolean values</term>
<listitem>
<simpara>FEEL uses three-valued boolean logic, so a boolean logic expression may have values <literal>true</literal>, <literal>false</literal>, or <literal>null</literal>.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Dates</term>
<listitem>
<simpara>Date literals are not supported in FEEL, but you can use the built-in <literal>date()</literal> function to construct date values. Date strings in FEEL follow the format defined in the <link xlink:href="https://www.w3.org/TR/xmlschema-2/#date">XML Schema Part 2: Datatypes</link> document. The format is <literal>"YYYY-MM-DD"</literal> where <literal>YYYY</literal> is the year with four digits, <literal>MM</literal> is the number of the month with
two digits, and <literal>DD</literal> is the number of the day.</simpara>
<simpara>Example:</simpara>
<screen>date( "2017-06-23" )</screen>
<simpara>Date objects have time equal to <literal>"00:00:00"</literal>, which is midnight. The dates are considered to be local, without a timezone.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Time</term>
<listitem>
<simpara>Time literals are not supported in FEEL, but you can use the built-in <literal>time()</literal> function to construct time values. Time strings in FEEL follow the format defined in the <link xlink:href="https://www.w3.org/TR/xmlschema-2/#time">XML Schema Part 2: Datatypes</link> document. The format is <literal>"hh:mm:ss[.uuu][(+-)hh:mm]"</literal> where <literal>hh</literal> is the hour of the day (from <literal>00</literal> to <literal>23</literal>), <literal>mm</literal> is the minutes in the hour, and <literal>ss</literal> is the number of seconds in the minute. Optionally, the string may define the number of milliseconds (<literal>uuu</literal>) within the second and contain a positive (<literal>+</literal>) or negative (<literal>-</literal>) offset from UTC time to define its timezone. Instead of using an offset, you can use the letter <literal>z</literal> to represent the UTC time, which is the same as an offset of <literal>-00:00</literal>. If no offset is defined, the time is considered to be local.</simpara>
<simpara>Examples:</simpara>
<screen>time( "04:25:12" )
time( "14:10:00+02:00" )
time( "22:35:40.345-05:00" )
time( "15:00:30z" )</screen>
<simpara>Time values that define an offset or a timezone cannot be compared to local times that do not define an offset or a timezone.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Date and time</term>
<listitem>
<simpara>Date and time literals are not supported in FEEL, but you can use the built-in <literal>date and time()</literal> function to construct date and time values. Date and time strings in FEEL follow the format defined in the <link xlink:href="https://www.w3.org/TR/xmlschema-2/#dateTime">XML Schema Part 2: Datatypes</link> document. The format is <literal>"&lt;date&gt;T&lt;time&gt;"</literal>, where <literal>&lt;date&gt;</literal> and <literal>&lt;time&gt;</literal> follow the prescribed XML schema formatting, conjoined by <literal>T</literal>.</simpara>
<simpara>Examples:</simpara>
<screen>date and time( "2017-10-22T23:59:00" )
date and time( "2017-06-13T14:10:00+02:00" )
date and time( "2017-02-05T22:35:40.345-05:00" )
date and time( "2017-06-13T15:00:30z" )</screen>
<simpara>Date and time values that define an offset or a timezone cannot be compared to local date and time values
that do not define an offset or a timezone.</simpara>
<important>
<simpara>If your implementation of the DMN specification does not support spaces in the XML schema, use the keyword <literal>dateTime</literal> as a synonym of <literal>date and time</literal>.</simpara>
</important>
</listitem>
</varlistentry>
<varlistentry>
<term>Days and time duration</term>
<listitem>
<simpara>Days and time duration literals are not supported in FEEL, but you can use the built-in <literal>duration()</literal> function to construct days and time duration values. Days and time duration strings in FEEL follow the format defined in the <link xlink:href="https://www.w3.org/TR/xmlschema-2/#duration">XML Schema Part 2: Datatypes</link> document, but are restricted to only days, hours, minutes and seconds. Months and years are not supported.</simpara>
<simpara>Examples:</simpara>
<screen>duration( "P1DT23H12M30S" )
duration( "P23D" )
duration( "PT12H" )
duration( "PT35M" )</screen>
<important>
<simpara>If your implementation of the DMN specification does not support spaces in the XML schema, use the keyword <literal>dayTimeDuration</literal> as a synonym of <literal>days and time duration</literal>.</simpara>
</important>
</listitem>
</varlistentry>
<varlistentry>
<term>Years and months duration</term>
<listitem>
<simpara>Years and months duration literals are not supported in FEEL, but you can use the built-in <literal>duration()</literal> function to construct days and time duration values. Years and months duration strings in FEEL follow the format defined in the <link xlink:href="https://www.w3.org/TR/xmlschema-2/#duration">XML Schema Part 2: Datatypes</link> document, but are restricted to only years and months. Days, hours, minutes, or seconds are not supported.</simpara>
<simpara>Examples:</simpara>
<screen>duration( "P3Y5M" )
duration( "P2Y" )
duration( "P10M" )
duration( "P25M" )</screen>
<important>
<simpara>If your implementation of the DMN specification does not support spaces in the XML schema, use the keyword <literal>yearMonthDuration</literal> as a synonym of <literal>years and months duration</literal>.</simpara>
</important>
</listitem>
</varlistentry>
<varlistentry>
<term>Functions</term>
<listitem>
<simpara>FEEL has <literal>function</literal> literals (or anonymous functions) that you can use to create functions. The DMN specification currently does not provide an explicit way of declaring a variable as a <literal>function</literal>, but Red Hat Decision Manager extends the DMN built-in types to support variables of functions.</simpara>
<simpara>Example:</simpara>
<screen>function(a, b) a + b</screen>
<simpara>In this example, the FEEL expression creates a function that adds the parameters <literal>a</literal> and <literal>b</literal> and returns the result.</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Contexts</term>
<listitem>
<simpara>FEEL has <literal>context</literal> literals that you can use to create contexts. A <literal>context</literal> in FEEL is a list of key and value pairs,
similar to maps in languages like Java. The DMN specification currently does not provide an explicit way of declaring a variable as a <literal>context</literal>, but Red Hat Decision Manager extends the DMN built-in types to support variables of contexts.</simpara>
<simpara>Example:</simpara>
<screen>{ x : 5, y : 3 }</screen>
<simpara>In this example, the expression creates a context with two entries, <literal>x</literal> and <literal>y</literal>, representing a coordinate in a chart.</simpara>
<simpara>In DMN 1.2, another way to create contexts is to create an item definition that contains the list of keys as attributes, and then declare the variable as having that item definition type.</simpara>
<simpara>The Red Hat Decision Manager DMN API supports DMN <literal>ItemDefinition</literal> structural types in a <literal>DMNContext</literal> represented in two ways:</simpara>
<itemizedlist>
<listitem>
<simpara>User-defined Java type: Must be a valid JavaBeans object defining properties and getters for each of the components in the DMN <literal>ItemDefinition</literal>. If necessary, you can also use the <literal>@FEELProperty</literal> annotation for those getters representing a component name which would result in an invalid Java identifier.</simpara>
</listitem>
<listitem>
<simpara><literal>java.util.Map</literal> interface: The map needs to define the appropriate entries, with the keys corresponding to the component name in the DMN <literal>ItemDefinition</literal>.</simpara>
</listitem>
</itemizedlist>
</listitem>
</varlistentry>
<varlistentry>
<term>Ranges (or intervals)</term>
<listitem>
<simpara>FEEL has <literal>range</literal> literals that you can use to create ranges or intervals. A <literal>range</literal> in FEEL is a value that defines a lower and an upper bound, where either can be open or closed. The DMN specification currently does not provide an explicit way of declaring a variable as a <literal>range</literal>, but Red Hat Decision Manager extends the DMN built-in types to support variables of ranges.</simpara>
<simpara>The syntax of a range is defined in the following formats:</simpara>
<screen>range          := interval_start endpoint '..' endpoint interval_end
interval_start := open_start | closed_start
open_start     := '(' | ']'
closed_start   := '['
interval_end   := open_end | closed_end
open_end       := ')' | '['
closed_end     := ']'
endpoint       := expression</screen>
<simpara>The expression for the endpoint must return a comparable value, and the lower bound endpoint must be lower than the
upper bound endpoint.</simpara>
<simpara>For example, the following literal expression defines an interval between <literal>1</literal> and <literal>10</literal>, including the boundaries (a closed interval on both endpoints):</simpara>
<screen>[ 1 .. 10 ]</screen>
<simpara>The following literal expression defines an interval between 1 hour and 12 hours, including the lower boundary (a closed interval), but excluding the upper boundary (an open interval):</simpara>
<screen>[ duration("PT1H") .. duration("PT12H") ]</screen>
<simpara>You can use ranges in decision tables to test for ranges of values, or use ranges in simple literal expressions. For example, the following literal expression returns <literal>true</literal> if the value of a variable <literal>x</literal> is between <literal>0</literal> and <literal>100</literal>:</simpara>
<screen>x in [ 1 .. 100 ]</screen>
</listitem>
</varlistentry>
<varlistentry>
<term>Lists</term>
<listitem>
<simpara>FEEL has <literal>list</literal> literals that you can use to create lists of items. A <literal>list</literal> in FEEL is represented by a comma-separated list of values enclosed in square brackets. The DMN specification currently does not provide an explicit way of declaring a variable as a <literal>list</literal>, but Red Hat Decision Manager extends the DMN built-in types to support variables of lists.</simpara>
<simpara>Example:</simpara>
<screen>[ 2, 3, 4, 5 ]</screen>
<simpara>All lists in FEEL contain elements of the same type and are immutable. Elements in a list can be accessed by index, where the first element is <literal>1</literal>. Negative indexes can access elements starting from the end of the list so that <literal>-1</literal> is the last element.</simpara>
<simpara>For example, the following expression returns the second element of a list <literal>x</literal>:</simpara>
<screen>x[2]</screen>
<simpara>The following expression returns the second-to-last element of a list <literal>x</literal>:</simpara>
<screen>x[-2]</screen>
<simpara>Elements in a list can also be counted by the function <literal>count</literal>, which uses the list of elements as the parameter.</simpara>
<simpara>For example, the following expression returns <literal>4</literal>:</simpara>
<screen>count([ 2, 3, 4, 5 ])</screen>
</listitem>
</varlistentry>
</variablelist>
</section>
</section>
<section xml:id="dmn-boxed-expressions-con_dmn-models">
<title>DMN decision logic in boxed expressions</title>
<simpara>Boxed expressions in DMN are tables that you use to define the underlying logic of decision nodes and business knowledge models in a decision requirements diagram (DRD) or decision requirements graph (DRG). Some boxed expressions can contain other boxed expressions, but the top-level boxed expression corresponds to the decision logic of a single DRD artifact. While DRDs with one or more DRGs represent the flow of a DMN decision model, boxed expressions define the actual decision logic of individual nodes. DRDs and boxed expressions together form a complete and functional DMN decision model.</simpara>
<simpara>The following are the types of DMN boxed expressions:</simpara>
<itemizedlist>
<listitem>
<simpara>Decision tables</simpara>
</listitem>
<listitem>
<simpara>Literal expressions</simpara>
</listitem>
<listitem>
<simpara>Contexts</simpara>
</listitem>
<listitem>
<simpara>Relations</simpara>
</listitem>
<listitem>
<simpara>Functions</simpara>
</listitem>
<listitem>
<simpara>Invocations</simpara>
</listitem>
<listitem>
<simpara>Lists</simpara>
</listitem>
</itemizedlist>
<note>
<simpara>Red Hat Decision Manager does not provide boxed list expressions in Business Central, but supports a FEEL <literal>list</literal> data type that you can use in boxed literal expressions. For more information about the <literal>list</literal> data type and other FEEL data types in Red Hat Decision Manager, see <xref linkend="dmn-data-types-ref_dmn-models"/>.</simpara>
</note>
<simpara>All Friendly Enough Expression Language (FEEL) expressions that you use in your boxed expressions must conform to the FEEL syntax requirements in the OMG <link xlink:href="https://www.omg.org/spec/DMN">Decision Model and Notation specification</link>.</simpara>
<section xml:id="dmn-decision-tables-con_dmn-models">
<title>DMN decision tables</title>
<simpara>A decision table in DMN is a visual representation of one or more business rules in a tabular format. You use decision tables to define rules for a decision node that applies those rules at a given point in the decision model. Each rule consists of a single row in the table, and includes columns that define the conditions (input) and outcome (output) for that particular row. The definition of each row is precise enough to derive the outcome using the values of the conditions. Input and output values can be FEEL expressions or defined data type values.</simpara>
<simpara>For example, the following decision table determines credit score ratings based on a defined range of a loan applicant’s credit score:</simpara>
<figure>
<title>Decision table for credit score rating</title>
<mediaobject>
<imageobject>
<imagedata fileref="images/_images/dmn/dmn-decision-table-example.png"/>
</imageobject>
<textobject><phrase>dmn decision table example</phrase></textobject>
</mediaobject>
</figure>
<simpara>The following decision table determines the next step in a lending strategy for applicants depending on applicant loan eligibility and the bureau call type:</simpara>
<figure>
<title>Decision table for lending strategy</title>
<mediaobject>
<imageobject>
<imagedata fileref="images/_images/dmn/dmn-decision-table-example2.png"/>
</imageobject>
<textobject><phrase>dmn decision table example2</phrase></textobject>
</mediaobject>
</figure>
<simpara>The following decision table determines applicant qualification for a loan as the concluding decision node in a loan prequalification decision model:</simpara>
<figure>
<title>Decision table for loan prequalification</title>
<mediaobject>
<imageobject>
<imagedata fileref="images/_images/dmn/dmn-decision-table-example3.png"/>
</imageobject>
<textobject><phrase>dmn decision table example3</phrase></textobject>
</mediaobject>
</figure>
<simpara>Decision tables are a popular way of modeling rules and decision logic, and are used in many methodologies (such as DMN) and implementation frameworks (such as Drools).</simpara>
<important>
<simpara>Red Hat Decision Manager supports both DMN decision tables and Drools-native decision tables, but they are different types of assets with different syntax requirements and are not interchangeable. For more information about Drools-native decision tables in Red Hat Decision Manager, see
<link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_decision_manager/7.5/html-single/designing_a_decision_service_using_spreadsheet_decision_tables"><emphasis>Designing a decision service using spreadsheet decision tables</emphasis></link>.</simpara>
</important>
<section xml:id="dmn-decision-tables-hit-policies-con_dmn-models">
<title>Hit policies in DMN decision tables</title>
<simpara>Hit policies determine how to reach an outcome when multiple rules in a decision table match the provided input values. For example, if one rule in a decision table applies a sales discount to military personnel and another rule applies a discount to students, then when a customer is both a student and in the military, the decision table hit policy must indicate whether to apply one discount or the other (<emphasis role="strong">Unique</emphasis>, <emphasis role="strong">First</emphasis>) or both discounts (<emphasis role="strong">Collect Sum</emphasis>). You specify the single character of the hit policy (<emphasis role="strong">U</emphasis>, <emphasis role="strong">F</emphasis>, <emphasis role="strong">C+</emphasis>) in the upper-left corner of the decision table.</simpara>
<simpara>The following decision table hit policies are supported in DMN:</simpara>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong">Unique (U):</emphasis> Permits only one rule to match. Any overlap raises an error.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Any (A):</emphasis> Permits multiple rules to match, but they must all have the same output. If multiple matching rules do not have the same output, an error is raised.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Priority (P):</emphasis> Permits multiple rules to match, with different outputs. The output that comes first in the output values list is selected.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">First (F):</emphasis> Uses the first match in rule order.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Collect (C+, C&gt;, C&lt;, C#):</emphasis> Aggregates output from multiple rules based on an aggregation function.</simpara>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong">Collect ( C ):</emphasis> Aggregates values in an arbitrary list.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Collect Sum (C+):</emphasis> Outputs the sum of all collected values. Values must be numeric.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Collect Min (C&lt;):</emphasis> Outputs the minimum value among the matches. The resulting values must be comparable, such as numbers, dates, or text (lexicographic order).</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Collect Max (C&gt;):</emphasis> Outputs the maximum value among the matches. The resulting values must be comparable, such as numbers, dates or text (lexicographic order).</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Collect Count (C#):</emphasis> Outputs the number of matching rules.</simpara>
</listitem>
</itemizedlist>
</listitem>
</itemizedlist>
</section>
</section>
<section xml:id="dmn-literal-expressions-con_dmn-models">
<title>Boxed literal expressions</title>
<simpara>A boxed literal expression in DMN is a literal FEEL expression as text in a table cell, typically with a labeled column and an assigned data type. You use boxed literal expressions to define simple or complex node logic or decision data directly in FEEL for a particular node in a decision. Literal FEEL expressions must conform to FEEL syntax requirements in the OMG <link xlink:href="https://www.omg.org/spec/DMN">Decision Model and Notation specification</link>.</simpara>
<simpara>For example, the following boxed literal expression defines the minimum acceptable PITI calculation (principal, interest, taxes, and insurance) in a lending decision, where <literal>acceptable rate</literal> is a variable defined in the DMN model:</simpara>
<figure>
<title>Boxed literal expression for minimum PITI value</title>
<mediaobject>
<imageobject>
<imagedata fileref="images/_images/dmn/dmn-literal-expression-example2.png"/>
</imageobject>
<textobject><phrase>dmn literal expression example2</phrase></textobject>
</mediaobject>
</figure>
<simpara>The following boxed literal expression sorts a list of possible dating candidates (soul mates) in an online dating application based on their score on criteria such as age, location, and interests:</simpara>
<figure>
<title>Boxed literal expression for matching online dating candidates</title>
<mediaobject>
<imageobject>
<imagedata fileref="images/_images/dmn/dmn-literal-expression-example3b.png"/>
</imageobject>
<textobject><phrase>dmn literal expression example3b</phrase></textobject>
</mediaobject>
</figure>
</section>
<section xml:id="dmn-context-expressions-con_dmn-models">
<title>Boxed context expressions</title>
<simpara>A boxed context expression in DMN is a set of variable names and values with a result value. Each name-value pair is a context entry. You use context expressions to represent data definitions in decision logic and set a value for a desired decision element within the DMN decision model. A value in a boxed context expression can be a data type value or FEEL expression, or can contain a nested sub-expression of any type, such as a decision table, a literal expression, or another context expression.</simpara>
<simpara>For example, the following boxed context expression defines the factors for sorting delayed passengers in a flight-rebooking decision model, based on defined data types (<literal>tPassengerTable</literal>, <literal>tFlightNumberList</literal>):</simpara>
<figure>
<title>Boxed context expression for flight passenger waiting list</title>
<mediaobject>
<imageobject>
<imagedata fileref="images/_images/dmn/dmn-context-expression-example.png"/>
</imageobject>
<textobject><phrase>dmn context expression example</phrase></textobject>
</mediaobject>
</figure>
<simpara>The following boxed context expression defines the factors that determine whether a loan applicant can meet minimum mortgage payments based on principal, interest, taxes, and insurance (PITI), represented as a front-end ratio calculation with a sub-context expression:</simpara>
<figure>
<title>Boxed context expression for front-end client PITI ratio</title>
<mediaobject>
<imageobject>
<imagedata fileref="images/_images/dmn/dmn-context-expression-example2.png"/>
</imageobject>
<textobject><phrase>dmn context expression example2</phrase></textobject>
</mediaobject>
</figure>
</section>
<section xml:id="dmn-relation-expressions-con_dmn-models">
<title>Boxed relation expressions</title>
<simpara>A boxed relation expression in DMN is a traditional data table with information about given entities, listed as rows. You use boxed relation tables to define decision data for relevant entities in a decision at a particular node. Boxed relation expressions are similar to context expressions in that they set variable names and values, but relation expressions contain no result value and list all variable values based on a single defined variable in each column.</simpara>
<simpara>For example, the following boxed relation expression provides information about employees in an employee rostering decision:</simpara>
<figure>
<title>Boxed relation expression with employee information</title>
<mediaobject>
<imageobject>
<imagedata fileref="images/_images/dmn/dmn-relation-expression-example.png"/>
</imageobject>
<textobject><phrase>dmn relation expression example</phrase></textobject>
</mediaobject>
</figure>
</section>
<section xml:id="dmn-function-expressions-con_dmn-models">
<title>Boxed function expressions</title>
<simpara>A boxed function expression in DMN is a parameterized boxed expression containing a literal FEEL expression, a nested context expression of an external JAVA or PMML function, or a nested boxed expression of any type. By default, all business knowledge models are defined as boxed function expressions. You use boxed function expressions to call functions on your decision logic and to define all business knowledge models.</simpara>
<simpara>For example, the following boxed function expression determines airline flight capacity in a flight-rebooking decision model:</simpara>
<figure>
<title>Boxed function expression for flight capacity</title>
<mediaobject>
<imageobject>
<imagedata fileref="images/_images/dmn/dmn-function-expression-example.png"/>
</imageobject>
<textobject><phrase>dmn function expression example</phrase></textobject>
</mediaobject>
</figure>
<simpara>The following boxed function expression contains a basic Java function as a context expression for determining absolute value in a decision model calculation:</simpara>
<figure>
<title>Boxed function expression for absolute value</title>
<mediaobject>
<imageobject>
<imagedata fileref="images/_images/dmn/dmn-function-expression-example2.png"/>
</imageobject>
<textobject><phrase>dmn function expression example2</phrase></textobject>
</mediaobject>
</figure>
<simpara>The following boxed function expression determines a monthly mortgage installment as a business knowledge model in a lending decision, with the function value defined as a nested context expression:</simpara>
<figure>
<title>Boxed function expression for installment calculation in business knowledge model</title>
<mediaobject>
<imageobject>
<imagedata fileref="images/_images/dmn/dmn-function-expression-example3.png"/>
</imageobject>
<textobject><phrase>dmn function expression example3</phrase></textobject>
</mediaobject>
</figure>
</section>
<section xml:id="dmn-invocation-expressions-con_dmn-models">
<title>Boxed invocation expressions</title>
<simpara>A boxed invocation expression in DMN is a boxed expression that invokes a business knowledge model. A boxed invocation expression contains the name of the business knowledge model to be invoked and a list of parameter bindings. Each binding is represented by two boxed expressions on a row: The box on the left contains the name of a parameter and the box on the right contains the binding expression whose value is assigned to the parameter to evaluate the invoked business knowledge model. You use boxed invocations to invoke at a particular decision node a business knowledge model defined in the decision model.</simpara>
<simpara>For example, the following boxed invocation expression invokes a <literal>Reassign Next Passenger</literal> business knowledge model as the concluding decision node in a flight-rebooking decision model:</simpara>
<figure>
<title>Boxed invocation expression to reassign flight passengers</title>
<mediaobject>
<imageobject>
<imagedata fileref="images/_images/dmn/dmn-invocation-example.png"/>
</imageobject>
<textobject><phrase>dmn invocation example</phrase></textobject>
</mediaobject>
</figure>
<simpara>The following boxed invocation expression invokes an <literal>InstallmentCalculation</literal> business knowledge model to calculate a monthly installment amount for a loan before proceeding to affordability decisions:</simpara>
<figure>
<title>Boxed invocation expression for required monthly installment</title>
<mediaobject>
<imageobject>
<imagedata fileref="images/_images/dmn/dmn-invocation-example2.png"/>
</imageobject>
<textobject><phrase>dmn invocation example2</phrase></textobject>
</mediaobject>
</figure>
</section>
</section>
<section xml:id="dmn-model-example-ref_dmn-models">
<title>DMN model example</title>
<simpara>The following is a real-world DMN model example that demonstrates how you can use decision modeling to reach a decision based on input data, circumstances, and company guidelines. In this scenario, a flight from San Diego to New York is canceled, requiring the affected airline to find alternate arrangements for its inconvenienced passengers.</simpara>
<simpara>First, the airline collects the information necessary to determine how best to get the travelers to their destinations:</simpara>
<variablelist>
<varlistentry>
<term>Input data</term>
<listitem>
<itemizedlist>
<listitem>
<simpara>List of flights</simpara>
</listitem>
<listitem>
<simpara>List of passengers</simpara>
</listitem>
</itemizedlist>
</listitem>
</varlistentry>
<varlistentry>
<term>Decisions</term>
<listitem>
<itemizedlist>
<listitem>
<simpara>Prioritize the passengers who will get seats on a new flight</simpara>
</listitem>
<listitem>
<simpara>Determine which flights those passengers will be offered</simpara>
</listitem>
</itemizedlist>
</listitem>
</varlistentry>
<varlistentry>
<term>Business knowledge models</term>
<listitem>
<itemizedlist>
<listitem>
<simpara>The company process for determining passenger priority</simpara>
</listitem>
<listitem>
<simpara>Any flights that have space available</simpara>
</listitem>
<listitem>
<simpara>Company rules for determining how best to reassign inconvenienced passengers</simpara>
</listitem>
</itemizedlist>
</listitem>
</varlistentry>
</variablelist>
<simpara>The airline then uses the DMN standard to model its decision process in the following decision requirements diagram (DRD) for determining the best rebooking solution:</simpara>
<figure>
<title>DRD for flight rebooking</title>
<mediaobject>
<imageobject>
<imagedata fileref="images/_images/dmn/dmn-passenger-rebooking-drd.png"/>
</imageobject>
<textobject><phrase>dmn passenger rebooking drd</phrase></textobject>
</mediaobject>
</figure>
<simpara>Similar to flowcharts, DRDs use shapes to represent the different elements in a process. Ovals contain the two necessary input data, rectangles contain the decision points in the model, and rectangles with clipped corners (business knowledge models) contain reusable logic that can be repeatedly invoked.</simpara>
<simpara>The DRD draws logic for each element from boxed expressions that provide variable definitions using FEEL expressions or data type values.</simpara>
<simpara>Some boxed expressions are basic, such as the following decision for establishing a prioritized waiting list:</simpara>
<figure>
<title>Boxed context expression example for prioritized wait list</title>
<mediaobject>
<imageobject>
<imagedata fileref="images/_images/dmn/dmn-context-expression-example.png"/>
</imageobject>
<textobject><phrase>dmn context expression example</phrase></textobject>
</mediaobject>
</figure>
<simpara>Some boxed expressions are more complex with greater detail and calculation, such as the following business knowledge model for reassigning the next delayed passenger:</simpara>
<figure>
<title>Boxed function expression for passenger reassignment</title>
<mediaobject>
<imageobject>
<imagedata fileref="images/_images/dmn/dmn-reassign-passenger.png"/>
</imageobject>
<textobject><phrase>dmn reassign passenger</phrase></textobject>
</mediaobject>
</figure>
<simpara>The following is the DMN source file for this decision model:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;dmn:definitions xmlns="https://www.drools.org/kie-dmn/Flight-rebooking" xmlns:dmn="http://www.omg.org/spec/DMN/20151101/dmn.xsd" xmlns:feel="http://www.omg.org/spec/FEEL/20140401" id="_0019_flight_rebooking" name="0019-flight-rebooking" namespace="https://www.drools.org/kie-dmn/Flight-rebooking"&gt;
  &lt;dmn:itemDefinition id="_tFlight" name="tFlight"&gt;
    &lt;dmn:itemComponent id="_tFlight_Flight" name="Flight Number"&gt;
      &lt;dmn:typeRef&gt;feel:string&lt;/dmn:typeRef&gt;
    &lt;/dmn:itemComponent&gt;
    &lt;dmn:itemComponent id="_tFlight_From" name="From"&gt;
      &lt;dmn:typeRef&gt;feel:string&lt;/dmn:typeRef&gt;
    &lt;/dmn:itemComponent&gt;
    &lt;dmn:itemComponent id="_tFlight_To" name="To"&gt;
      &lt;dmn:typeRef&gt;feel:string&lt;/dmn:typeRef&gt;
    &lt;/dmn:itemComponent&gt;
    &lt;dmn:itemComponent id="_tFlight_Dep" name="Departure"&gt;
      &lt;dmn:typeRef&gt;feel:dateTime&lt;/dmn:typeRef&gt;
    &lt;/dmn:itemComponent&gt;
    &lt;dmn:itemComponent id="_tFlight_Arr" name="Arrival"&gt;
      &lt;dmn:typeRef&gt;feel:dateTime&lt;/dmn:typeRef&gt;
    &lt;/dmn:itemComponent&gt;
    &lt;dmn:itemComponent id="_tFlight_Capacity" name="Capacity"&gt;
      &lt;dmn:typeRef&gt;feel:number&lt;/dmn:typeRef&gt;
    &lt;/dmn:itemComponent&gt;
    &lt;dmn:itemComponent id="_tFlight_Status" name="Status"&gt;
      &lt;dmn:typeRef&gt;feel:string&lt;/dmn:typeRef&gt;
    &lt;/dmn:itemComponent&gt;
  &lt;/dmn:itemDefinition&gt;
  &lt;dmn:itemDefinition id="_tFlightTable" isCollection="true" name="tFlightTable"&gt;
    &lt;dmn:typeRef&gt;tFlight&lt;/dmn:typeRef&gt;
  &lt;/dmn:itemDefinition&gt;
  &lt;dmn:itemDefinition id="_tPassenger" name="tPassenger"&gt;
    &lt;dmn:itemComponent id="_tPassenger_Name" name="Name"&gt;
      &lt;dmn:typeRef&gt;feel:string&lt;/dmn:typeRef&gt;
    &lt;/dmn:itemComponent&gt;
    &lt;dmn:itemComponent id="_tPassenger_Status" name="Status"&gt;
      &lt;dmn:typeRef&gt;feel:string&lt;/dmn:typeRef&gt;
    &lt;/dmn:itemComponent&gt;
    &lt;dmn:itemComponent id="_tPassenger_Miles" name="Miles"&gt;
      &lt;dmn:typeRef&gt;feel:number&lt;/dmn:typeRef&gt;
    &lt;/dmn:itemComponent&gt;
    &lt;dmn:itemComponent id="_tPassenger_Flight" name="Flight Number"&gt;
      &lt;dmn:typeRef&gt;feel:string&lt;/dmn:typeRef&gt;
    &lt;/dmn:itemComponent&gt;
  &lt;/dmn:itemDefinition&gt;
  &lt;dmn:itemDefinition id="_tPassengerTable" isCollection="true" name="tPassengerTable"&gt;
    &lt;dmn:typeRef&gt;tPassenger&lt;/dmn:typeRef&gt;
  &lt;/dmn:itemDefinition&gt;
  &lt;dmn:itemDefinition id="_tFlightNumberList" isCollection="true" name="tFlightNumberList"&gt;
    &lt;dmn:typeRef&gt;feel:string&lt;/dmn:typeRef&gt;
  &lt;/dmn:itemDefinition&gt;
  &lt;dmn:inputData id="i_Flight_List" name="Flight List"&gt;
    &lt;dmn:variable name="Flight List" typeRef="tFlightTable"/&gt;
  &lt;/dmn:inputData&gt;
  &lt;dmn:inputData id="i_Passenger_List" name="Passenger List"&gt;
    &lt;dmn:variable name="Passenger List" typeRef="tPassengerTable"/&gt;
  &lt;/dmn:inputData&gt;
  &lt;dmn:decision name="Prioritized Waiting List" id="d_PrioritizedWaitingList"&gt;
    &lt;dmn:variable name="Prioritized Waiting List" typeRef="tPassengerTable"/&gt;
    &lt;dmn:informationRequirement&gt;
      &lt;dmn:requiredInput href="#i_Passenger_List"/&gt;
    &lt;/dmn:informationRequirement&gt;
    &lt;dmn:informationRequirement&gt;
      &lt;dmn:requiredInput href="#i_Flight_List"/&gt;
    &lt;/dmn:informationRequirement&gt;
    &lt;dmn:knowledgeRequirement&gt;
      &lt;dmn:requiredKnowledge href="#b_PassengerPriority"/&gt;
    &lt;/dmn:knowledgeRequirement&gt;
    &lt;dmn:context&gt;
      &lt;dmn:contextEntry&gt;
        &lt;dmn:variable name="Cancelled Flights" typeRef="tFlightNumberList"/&gt;
        &lt;dmn:literalExpression&gt;
          &lt;dmn:text&gt;Flight List[ Status = "cancelled" ].Flight Number&lt;/dmn:text&gt;
        &lt;/dmn:literalExpression&gt;
      &lt;/dmn:contextEntry&gt;
      &lt;dmn:contextEntry&gt;
        &lt;dmn:variable name="Waiting List" typeRef="tPassengerTable"/&gt;
        &lt;dmn:literalExpression&gt;
          &lt;dmn:text&gt;Passenger List[ list contains( Cancelled Flights, Flight Number ) ]&lt;/dmn:text&gt;
        &lt;/dmn:literalExpression&gt;
      &lt;/dmn:contextEntry&gt;
      &lt;dmn:contextEntry&gt;
        &lt;dmn:literalExpression&gt;
          &lt;dmn:text&gt;sort( Waiting List, passenger priority )&lt;/dmn:text&gt;
        &lt;/dmn:literalExpression&gt;
      &lt;/dmn:contextEntry&gt;
    &lt;/dmn:context&gt;
  &lt;/dmn:decision&gt;
  &lt;dmn:decision name="Rebooked Passengers" id="d_RebookedPassengers"&gt;
    &lt;dmn:variable name="Rebooked Passengers" typeRef="tPassengerTable"/&gt;
    &lt;dmn:informationRequirement&gt;
      &lt;dmn:requiredDecision href="#d_PrioritizedWaitingList"/&gt;
    &lt;/dmn:informationRequirement&gt;
    &lt;dmn:informationRequirement&gt;
      &lt;dmn:requiredInput href="#i_Flight_List"/&gt;
    &lt;/dmn:informationRequirement&gt;
    &lt;dmn:knowledgeRequirement&gt;
      &lt;dmn:requiredKnowledge href="#b_ReassignNextPassenger"/&gt;
    &lt;/dmn:knowledgeRequirement&gt;
    &lt;dmn:invocation&gt;
      &lt;dmn:literalExpression&gt;
        &lt;dmn:text&gt;reassign next passenger&lt;/dmn:text&gt;
      &lt;/dmn:literalExpression&gt;
      &lt;dmn:binding&gt;
        &lt;dmn:parameter name="Waiting List"/&gt;
        &lt;dmn:literalExpression&gt;
          &lt;dmn:text&gt;Prioritized Waiting List&lt;/dmn:text&gt;
        &lt;/dmn:literalExpression&gt;
      &lt;/dmn:binding&gt;
      &lt;dmn:binding&gt;
        &lt;dmn:parameter name="Reassigned Passengers List"/&gt;
        &lt;dmn:literalExpression&gt;
          &lt;dmn:text&gt;[]&lt;/dmn:text&gt;
        &lt;/dmn:literalExpression&gt;
      &lt;/dmn:binding&gt;
      &lt;dmn:binding&gt;
        &lt;dmn:parameter name="Flights"/&gt;
        &lt;dmn:literalExpression&gt;
          &lt;dmn:text&gt;Flight List&lt;/dmn:text&gt;
        &lt;/dmn:literalExpression&gt;
      &lt;/dmn:binding&gt;
    &lt;/dmn:invocation&gt;
  &lt;/dmn:decision&gt;
  &lt;dmn:businessKnowledgeModel id="b_PassengerPriority" name="passenger priority"&gt;
    &lt;dmn:encapsulatedLogic&gt;
      &lt;dmn:formalParameter name="Passenger1" typeRef="tPassenger"/&gt;
      &lt;dmn:formalParameter name="Passenger2" typeRef="tPassenger"/&gt;
      &lt;dmn:decisionTable hitPolicy="UNIQUE"&gt;
        &lt;dmn:input id="b_Passenger_Priority_dt_i_P1_Status" label="Passenger1.Status"&gt;
          &lt;dmn:inputExpression typeRef="feel:string"&gt;
            &lt;dmn:text&gt;Passenger1.Status&lt;/dmn:text&gt;
          &lt;/dmn:inputExpression&gt;
          &lt;dmn:inputValues&gt;
            &lt;dmn:text&gt;"gold", "silver", "bronze"&lt;/dmn:text&gt;
          &lt;/dmn:inputValues&gt;
        &lt;/dmn:input&gt;
        &lt;dmn:input id="b_Passenger_Priority_dt_i_P2_Status" label="Passenger2.Status"&gt;
          &lt;dmn:inputExpression typeRef="feel:string"&gt;
            &lt;dmn:text&gt;Passenger2.Status&lt;/dmn:text&gt;
          &lt;/dmn:inputExpression&gt;
          &lt;dmn:inputValues&gt;
            &lt;dmn:text&gt;"gold", "silver", "bronze"&lt;/dmn:text&gt;
          &lt;/dmn:inputValues&gt;
        &lt;/dmn:input&gt;
        &lt;dmn:input id="b_Passenger_Priority_dt_i_P1_Miles" label="Passenger1.Miles"&gt;
          &lt;dmn:inputExpression typeRef="feel:string"&gt;
            &lt;dmn:text&gt;Passenger1.Miles&lt;/dmn:text&gt;
          &lt;/dmn:inputExpression&gt;
        &lt;/dmn:input&gt;
        &lt;dmn:output id="b_Status_Priority_dt_o" label="Passenger1 has priority"&gt;
          &lt;dmn:outputValues&gt;
            &lt;dmn:text&gt;true, false&lt;/dmn:text&gt;
          &lt;/dmn:outputValues&gt;
          &lt;dmn:defaultOutputEntry&gt;
            &lt;dmn:text&gt;false&lt;/dmn:text&gt;
          &lt;/dmn:defaultOutputEntry&gt;
        &lt;/dmn:output&gt;
        &lt;dmn:rule id="b_Passenger_Priority_dt_r1"&gt;
          &lt;dmn:inputEntry id="b_Passenger_Priority_dt_r1_i1"&gt;
            &lt;dmn:text&gt;"gold"&lt;/dmn:text&gt;
          &lt;/dmn:inputEntry&gt;
          &lt;dmn:inputEntry id="b_Passenger_Priority_dt_r1_i2"&gt;
            &lt;dmn:text&gt;"gold"&lt;/dmn:text&gt;
          &lt;/dmn:inputEntry&gt;
          &lt;dmn:inputEntry id="b_Passenger_Priority_dt_r1_i3"&gt;
            &lt;dmn:text&gt;&gt;= Passenger2.Miles&lt;/dmn:text&gt;
          &lt;/dmn:inputEntry&gt;
          &lt;dmn:outputEntry id="b_Passenger_Priority_dt_r1_o1"&gt;
            &lt;dmn:text&gt;true&lt;/dmn:text&gt;
          &lt;/dmn:outputEntry&gt;
        &lt;/dmn:rule&gt;
        &lt;dmn:rule id="b_Passenger_Priority_dt_r2"&gt;
          &lt;dmn:inputEntry id="b_Passenger_Priority_dt_r2_i1"&gt;
            &lt;dmn:text&gt;"gold"&lt;/dmn:text&gt;
          &lt;/dmn:inputEntry&gt;
          &lt;dmn:inputEntry id="b_Passenger_Priority_dt_r2_i2"&gt;
            &lt;dmn:text&gt;"silver","bronze"&lt;/dmn:text&gt;
          &lt;/dmn:inputEntry&gt;
          &lt;dmn:inputEntry id="b_Passenger_Priority_dt_r2_i3"&gt;
            &lt;dmn:text&gt;-&lt;/dmn:text&gt;
          &lt;/dmn:inputEntry&gt;
          &lt;dmn:outputEntry id="b_Passenger_Priority_dt_r2_o1"&gt;
            &lt;dmn:text&gt;true&lt;/dmn:text&gt;
          &lt;/dmn:outputEntry&gt;
        &lt;/dmn:rule&gt;
        &lt;dmn:rule id="b_Passenger_Priority_dt_r3"&gt;
          &lt;dmn:inputEntry id="b_Passenger_Priority_dt_r3_i1"&gt;
            &lt;dmn:text&gt;"silver"&lt;/dmn:text&gt;
          &lt;/dmn:inputEntry&gt;
          &lt;dmn:inputEntry id="b_Passenger_Priority_dt_r3_i2"&gt;
            &lt;dmn:text&gt;"silver"&lt;/dmn:text&gt;
          &lt;/dmn:inputEntry&gt;
          &lt;dmn:inputEntry id="b_Passenger_Priority_dt_r3_i3"&gt;
            &lt;dmn:text&gt;&gt;= Passenger2.Miles&lt;/dmn:text&gt;
          &lt;/dmn:inputEntry&gt;
          &lt;dmn:outputEntry id="b_Passenger_Priority_dt_r3_o1"&gt;
            &lt;dmn:text&gt;true&lt;/dmn:text&gt;
          &lt;/dmn:outputEntry&gt;
        &lt;/dmn:rule&gt;
        &lt;dmn:rule id="b_Passenger_Priority_dt_r4"&gt;
          &lt;dmn:inputEntry id="b_Passenger_Priority_dt_r4_i1"&gt;
            &lt;dmn:text&gt;"silver"&lt;/dmn:text&gt;
          &lt;/dmn:inputEntry&gt;
          &lt;dmn:inputEntry id="b_Passenger_Priority_dt_r4_i2"&gt;
            &lt;dmn:text&gt;"bronze"&lt;/dmn:text&gt;
          &lt;/dmn:inputEntry&gt;
          &lt;dmn:inputEntry id="b_Passenger_Priority_dt_r4_i3"&gt;
            &lt;dmn:text&gt;-&lt;/dmn:text&gt;
          &lt;/dmn:inputEntry&gt;
          &lt;dmn:outputEntry id="b_Passenger_Priority_dt_r4_o1"&gt;
            &lt;dmn:text&gt;true&lt;/dmn:text&gt;
          &lt;/dmn:outputEntry&gt;
        &lt;/dmn:rule&gt;
        &lt;dmn:rule id="b_Passenger_Priority_dt_r5"&gt;
          &lt;dmn:inputEntry id="b_Passenger_Priority_dt_r5_i1"&gt;
            &lt;dmn:text&gt;"bronze"&lt;/dmn:text&gt;
          &lt;/dmn:inputEntry&gt;
          &lt;dmn:inputEntry id="b_Passenger_Priority_dt_r5_i2"&gt;
            &lt;dmn:text&gt;"bronze"&lt;/dmn:text&gt;
          &lt;/dmn:inputEntry&gt;
          &lt;dmn:inputEntry id="b_Passenger_Priority_dt_r5_i3"&gt;
            &lt;dmn:text&gt;&gt;= Passenger2.Miles&lt;/dmn:text&gt;
          &lt;/dmn:inputEntry&gt;
          &lt;dmn:outputEntry id="b_Passenger_Priority_dt_r5_o1"&gt;
            &lt;dmn:text&gt;true&lt;/dmn:text&gt;
          &lt;/dmn:outputEntry&gt;
        &lt;/dmn:rule&gt;
      &lt;/dmn:decisionTable&gt;
    &lt;/dmn:encapsulatedLogic&gt;
    &lt;dmn:variable name="passenger priority" typeRef="feel:boolean"/&gt;
  &lt;/dmn:businessKnowledgeModel&gt;
  &lt;dmn:businessKnowledgeModel id="b_ReassignNextPassenger" name="reassign next passenger"&gt;
    &lt;dmn:encapsulatedLogic&gt;
      &lt;dmn:formalParameter name="Waiting List" typeRef="tPassengerTable"/&gt;
      &lt;dmn:formalParameter name="Reassigned Passengers List" typeRef="tPassengerTable"/&gt;
      &lt;dmn:formalParameter name="Flights" typeRef="tFlightTable"/&gt;
      &lt;dmn:context&gt;
        &lt;dmn:contextEntry&gt;
          &lt;dmn:variable name="Next Passenger" typeRef="tPassenger"/&gt;
          &lt;dmn:literalExpression&gt;
            &lt;dmn:text&gt;Waiting List[1]&lt;/dmn:text&gt;
          &lt;/dmn:literalExpression&gt;
        &lt;/dmn:contextEntry&gt;
        &lt;dmn:contextEntry&gt;
          &lt;dmn:variable name="Original Flight" typeRef="tFlight"/&gt;
          &lt;dmn:literalExpression&gt;
            &lt;dmn:text&gt;Flights[ Flight Number = Next Passenger.Flight Number ][1]&lt;/dmn:text&gt;
          &lt;/dmn:literalExpression&gt;
        &lt;/dmn:contextEntry&gt;
        &lt;dmn:contextEntry&gt;
          &lt;dmn:variable name="Best Alternate Flight" typeRef="tFlight"/&gt;
          &lt;dmn:literalExpression&gt;
            &lt;dmn:text&gt;Flights[ From = Original Flight.From and To = Original Flight.To and Departure &gt; Original Flight.Departure and Status = "scheduled" and has capacity( item, Reassigned Passengers List ) ][1]&lt;/dmn:text&gt;
          &lt;/dmn:literalExpression&gt;
        &lt;/dmn:contextEntry&gt;
        &lt;dmn:contextEntry&gt;
          &lt;dmn:variable name="Reassigned Passenger" typeRef="tPassenger"/&gt;
          &lt;dmn:context&gt;
            &lt;dmn:contextEntry&gt;
              &lt;dmn:variable name="Name" typeRef="feel:string"/&gt;
              &lt;dmn:literalExpression&gt;
                &lt;dmn:text&gt;Next Passenger.Name&lt;/dmn:text&gt;
              &lt;/dmn:literalExpression&gt;
            &lt;/dmn:contextEntry&gt;
            &lt;dmn:contextEntry&gt;
              &lt;dmn:variable name="Status" typeRef="feel:string"/&gt;
              &lt;dmn:literalExpression&gt;
                &lt;dmn:text&gt;Next Passenger.Status&lt;/dmn:text&gt;
              &lt;/dmn:literalExpression&gt;
            &lt;/dmn:contextEntry&gt;
            &lt;dmn:contextEntry&gt;
              &lt;dmn:variable name="Miles" typeRef="feel:number"/&gt;
              &lt;dmn:literalExpression&gt;
                &lt;dmn:text&gt;Next Passenger.Miles&lt;/dmn:text&gt;
              &lt;/dmn:literalExpression&gt;
            &lt;/dmn:contextEntry&gt;
            &lt;dmn:contextEntry&gt;
              &lt;dmn:variable name="Flight Number" typeRef="feel:string"/&gt;
              &lt;dmn:literalExpression&gt;
                &lt;dmn:text&gt;Best Alternate Flight.Flight Number&lt;/dmn:text&gt;
              &lt;/dmn:literalExpression&gt;
            &lt;/dmn:contextEntry&gt;
          &lt;/dmn:context&gt;
        &lt;/dmn:contextEntry&gt;
        &lt;dmn:contextEntry&gt;
          &lt;dmn:variable name="Remaining Waiting List" typeRef="tPassengerTable"/&gt;
          &lt;dmn:literalExpression&gt;
            &lt;dmn:text&gt;remove( Waiting List, 1 )&lt;/dmn:text&gt;
          &lt;/dmn:literalExpression&gt;
        &lt;/dmn:contextEntry&gt;
        &lt;dmn:contextEntry&gt;
          &lt;dmn:variable name="Updated Reassigned Passengers List" typeRef="tPassengerTable"/&gt;
          &lt;dmn:literalExpression&gt;
            &lt;dmn:text&gt;append( Reassigned Passengers List, Reassigned Passenger )&lt;/dmn:text&gt;
          &lt;/dmn:literalExpression&gt;
        &lt;/dmn:contextEntry&gt;
        &lt;dmn:contextEntry&gt;
          &lt;dmn:literalExpression&gt;
            &lt;dmn:text&gt;if count( Remaining Waiting List ) &gt; 0 then reassign next passenger( Remaining Waiting List, Updated Reassigned Passengers List, Flights ) else Updated Reassigned Passengers List&lt;/dmn:text&gt;
          &lt;/dmn:literalExpression&gt;
        &lt;/dmn:contextEntry&gt;
      &lt;/dmn:context&gt;
    &lt;/dmn:encapsulatedLogic&gt;
    &lt;dmn:variable name="reassign next passenger" typeRef="tPassengerTable"/&gt;
    &lt;dmn:knowledgeRequirement&gt;
      &lt;dmn:requiredKnowledge href="#b_HasCapacity"/&gt;
    &lt;/dmn:knowledgeRequirement&gt;
  &lt;/dmn:businessKnowledgeModel&gt;
  &lt;dmn:businessKnowledgeModel id="b_HasCapacity" name="has capacity"&gt;
    &lt;dmn:encapsulatedLogic&gt;
      &lt;dmn:formalParameter name="flight" typeRef="tFlight"/&gt;
      &lt;dmn:formalParameter name="rebooked list" typeRef="tPassengerTable"/&gt;
      &lt;dmn:literalExpression&gt;
        &lt;dmn:text&gt;flight.Capacity &gt; count( rebooked list[ Flight Number = flight.Flight Number ] )&lt;/dmn:text&gt;
      &lt;/dmn:literalExpression&gt;
    &lt;/dmn:encapsulatedLogic&gt;
    &lt;dmn:variable name="has capacity" typeRef="feel:boolean"/&gt;
  &lt;/dmn:businessKnowledgeModel&gt;
&lt;/dmn:definitions&gt;</programlisting>
</section>
</chapter>
<chapter xml:id="dmn-support-con_dmn-models">
<title>DMN support in Red Hat Decision Manager</title>
<simpara>Red Hat Decision Manager provides design and runtime support for DMN 1.2 models at conformance level 3. You can integrate DMN models with your Red Hat Decision Manager decision services in several ways:</simpara>
<itemizedlist>
<listitem>
<simpara>Design your DMN models directly in Business Central using the DMN designer</simpara>
</listitem>
<listitem>
<simpara>Import DMN files into your project in Business Central (<emphasis role="strong">Menu → Design → Projects → Import Asset</emphasis>)</simpara>
</listitem>
<listitem>
<simpara>Package DMN files as part of your project knowledge JAR (KJAR) file without Business Central</simpara>
</listitem>
</itemizedlist>
<simpara>In addition to all DMN conformance level 3 requirements, Red Hat Decision Manager also includes enhancements and fixes to FEEL and DMN model components to optimize the experience of implementing DMN decision services with Red Hat Decision Manager. From a platform perspective, DMN models are like any other business asset in Red Hat Decision Manager, such as DRL files or spreadsheet decision tables, that you can include in your Red Hat Decision Manager project and deploy to Decision Server in order to start your DMN decision services.</simpara>
<simpara>For more information about including external DMN files with your Red Hat Decision Manager project packaging and deployment method, see
<link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_decision_manager/7.5/html-single/packaging_and_deploying_a_red_hat_decision_manager_project"><emphasis>Packaging and deploying a Red Hat Decision Manager project</emphasis></link>.</simpara>
<section xml:id="dmn-properties-ref_dmn-models">
<title>Configurable DMN properties in Red Hat Decision Manager</title>
<simpara>Red Hat Decision Manager provides the following DMN properties that you can configure when you execute your DMN models on Decision Server or on your client application:</simpara>
<variablelist>
<varlistentry>
<term>org.kie.dmn.strictConformance</term>
<listitem>
<simpara>When enabled, this property disables by default any extensions or profiles provided beyond the DMN standard, such as some helper functions or enhanced features of DMN 1.2 backported into DMN 1.1. You can use this property to configure the decision engine to support only pure DMN features, such as when running the <link xlink:href="https://dmn-tck.github.io/tck/">DMN Technology Compatibility Kit</link> (TCK).</simpara>
<simpara>Default value: <literal>false</literal></simpara>
<screen>-Dorg.kie.dmn.strictConformance=true</screen>
</listitem>
</varlistentry>
<varlistentry>
<term>org.kie.dmn.runtime.typecheck</term>
<listitem>
<simpara>When enabled, this property enables verification of actual values conforming to their declared types in the DMN model, as input or output of DRD elements. You can use this property to verify whether data supplied to the DMN model or produced by the DMN model is compliant with what is specified in the model.</simpara>
<simpara>Default value: <literal>false</literal></simpara>
<screen>-Dorg.kie.dmn.runtime.typecheck=true</screen>
</listitem>
</varlistentry>
<varlistentry>
<term>org.kie.dmn.decisionservice.coercesingleton</term>
<listitem>
<simpara>By default, this property makes the result of a decision service defining a single output decision be the single value of the output decision value. When disabled, this property makes the result of a decision service defining a single output decision be a <literal>context</literal> with the single entry for that decision. You can use this property to adjust your decision service outputs according to your project requirements.</simpara>
<simpara>Default value: <literal>true</literal></simpara>
<screen>-Dorg.kie.dmn.decisionservice.coercesingleton=false</screen>
</listitem>
</varlistentry>
<varlistentry>
<term>org.kie.dmn.profiles.$PROFILE_NAME</term>
<listitem>
<simpara>When valorized with a Java fully qualified name, this property loads a DMN profile onto the decision engine at start time. You can use this property to implement a predefined DMN profile with supported features different from or beyond the DMN standard. For example, if you are creating DMN models using the Signavio DMN modeller, use this property to implement features from the Signavio DMN profile into your DMN decision service.</simpara>
<screen>-Dorg.kie.dmn.profiles.signavio=org.kie.dmn.signavio.KieDMNSignavioProfile</screen>
</listitem>
</varlistentry>
<varlistentry>
<term>org.kie.dmn.compiler.execmodel</term>
<listitem>
<simpara>When enabled, this property enables DMN decision table logic to be compiled into executable rule models during run time. You can use this property to evaluate DMN decision table logic more efficiently. This property is helpful when the executable model compilation was not originally performed during project compile time. Enabling this property may result in added compile time during the first evaluation by the decision engine, but subsequent compilations are more efficient.</simpara>
<simpara>Default value: <literal>false</literal></simpara>
<screen>-Dorg.kie.dmn.compiler.execmodel=true</screen>
</listitem>
</varlistentry>
</variablelist>
</section>
</chapter>
<chapter xml:id="dmn-model-creating-proc_dmn-models">
<title>Creating and editing DMN models in Business Central</title>
<simpara>You can use the DMN designer in Business Central to design DMN decision requirements diagrams (DRDs) and define decision logic for a complete and functional DMN decision model. Red Hat Decision Manager provides design and runtime support for DMN 1.2 models at conformance level 3, and includes enhancements and fixes to FEEL and DMN model components to optimize the experience of implementing DMN decision services with Red Hat Decision Manager.</simpara>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>In Business Central, go to <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Design</emphasis> → <emphasis role="strong">Projects</emphasis> and click the project name.</simpara>
</listitem>
<listitem>
<simpara>Create or import a DMN file in your Business Central project.</simpara>
<simpara>To create a DMN file, click <emphasis role="strong">Add Asset</emphasis> → <emphasis role="strong">DMN</emphasis>, enter an informative DMN model name, select the appropriate <emphasis role="strong">Package</emphasis>, and click <emphasis role="strong">Ok</emphasis>.</simpara>
<simpara>To import an existing DMN file, click <emphasis role="strong">Import Asset</emphasis>, enter the DMN model name, select the appropriate <emphasis role="strong">Package</emphasis>, select the DMN file to upload, and click <emphasis role="strong">Ok</emphasis>.</simpara>
<simpara>The new DMN file is now listed in the <emphasis role="strong">DMN</emphasis> panel of the <emphasis role="strong">Project Explorer</emphasis>, and the DMN decision requirements diagram (DRD) canvas appears.</simpara>
<note>
<simpara>If you imported a DMN file that does not contain layout information, the imported decision requirements diagram (DRD) is formatted automatically in the DMN designer. Click <emphasis role="strong">Save</emphasis> in the DMN designer to save the DRD layout.</simpara>
</note>
</listitem>
<listitem>
<simpara>Begin adding components to your new or imported DMN decision requirements diagram (DRD) by clicking and dragging one of the DMN nodes from the left toolbar:</simpara>
<figure>
<title>Adding DRD components</title>
<mediaobject>
<imageobject>
<imagedata fileref="images/_images/dmn/dmn-drag-decision-node.png"/>
</imageobject>
<textobject><phrase>dmn drag decision node</phrase></textobject>
</mediaobject>
</figure>
<simpara>The following DRD components are available:</simpara>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong">Decision</emphasis>: Use this node for a DMN decision, where one or more input elements determine an output based on defined decision logic.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Business knowledge model</emphasis>: Use this node for reusable functions with one or more decision elements. Decisions that have the same logic but depend on different sub-input data or sub-decisions use business knowledge models to determine which procedure to follow.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Knowledge source</emphasis>: Use this node for external authorities, documents, committees, or policies that regulate a decision or business knowledge model. Knowledge sources are references to real-world factors rather than executable business rules.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Input data</emphasis>: Use this node for information used in a decision node or a business knowledge model. Input data usually includes business-level concepts or objects relevant to the business, such as loan applicant data used in a lending strategy.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Text annotation</emphasis>: Use this node for explanatory notes associated with an input data node, decision node, business knowledge model, or knowledge source.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Decision service</emphasis>: Use this node to enclose a set of reusable decisions implemented as a decision service for invocation. A decision service can be used in other DMN models and can be invoked from an external application or a BPMN business process.</simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>In the DMN designer canvas, double-click the new DRD node to enter an informative node name.</simpara>
</listitem>
<listitem>
<simpara>If the node is a decision or business knowledge model, select the node to display the node options and click the <emphasis role="strong">Edit</emphasis> icon to open the DMN boxed expression designer to define the decision logic for the node:</simpara>
<figure>
<title>Opening a new decision node boxed expression</title>
<mediaobject>
<imageobject>
<imagedata fileref="images/_images/dmn/dmn-decision-edit.png"/>
</imageobject>
<textobject><phrase>dmn decision edit</phrase></textobject>
</mediaobject>
</figure>
<figure>
<title>Opening a new business knowledge model boxed expression</title>
<mediaobject>
<imageobject>
<imagedata fileref="images/_images/dmn/dmn-bkm-edit.png"/>
</imageobject>
<textobject><phrase>dmn bkm edit</phrase></textobject>
</mediaobject>
</figure>
<simpara>By default, all business knowledge models are defined as boxed function expressions containing a literal FEEL expression, a nested context expression of an external JAVA or PMML function, or a nested boxed expression of any type.</simpara>
<simpara>For decision nodes, you click the undefined table to select the type of boxed expression you want to use, such as a boxed literal expression, boxed context expression, decision table, or other DMN boxed expression.</simpara>
<figure>
<title>Selecting the logic type for a decision node</title>
<mediaobject>
<imageobject>
<imagedata fileref="images/_images/dmn/dmn-decision-boxed-expression-options.png"/>
</imageobject>
<textobject><phrase>dmn decision boxed expression options</phrase></textobject>
</mediaobject>
</figure>
<simpara>For business knowledge models, you click the top-left function cell to select the function type, or right-click the function value cell, select <emphasis role="strong">Clear</emphasis>, and select a boxed expression of another type.</simpara>
<figure>
<title>Selecting the function or other logic type for a business knowledge model</title>
<mediaobject>
<imageobject>
<imagedata fileref="images/_images/dmn/dmn-bkm-define.png"/>
</imageobject>
<textobject><phrase>dmn bkm define</phrase></textobject>
</mediaobject>
</figure>
</listitem>
<listitem>
<simpara>In the selected boxed expression designer for either a decision node (any expression type) or business knowledge model (function expression), click the applicable table cells to define the table name, variable data types, variable names and values, function parameters and bindings, or FEEL expressions to include in the decision logic.</simpara>
<simpara>You can right-click cells for additional actions where applicable, such as inserting or removing table rows and columns or clearing table contents.</simpara>
<simpara>The following is an example decision table for a decision node that determines credit score ratings based on a defined range of a loan applicant’s credit score:</simpara>
<figure>
<title>Decision node decision table for credit score rating</title>
<mediaobject>
<imageobject>
<imagedata fileref="images/_images/dmn/dmn-decision-table-example1a.png"/>
</imageobject>
<textobject><phrase>dmn decision table example1a</phrase></textobject>
</mediaobject>
</figure>
<simpara>The following is an example boxed function expression for a business knowledge model that calculates mortgage payments based on principal, interest, taxes, and insurance (PITI) as a literal expression:</simpara>
<figure>
<title>Business knowledge model function for PITI calculation</title>
<mediaobject>
<imageobject>
<imagedata fileref="images/_images/dmn/dmn-function-expression-example4.png"/>
</imageobject>
<textobject><phrase>dmn function expression example4</phrase></textobject>
</mediaobject>
</figure>
</listitem>
<listitem>
<simpara>After you define the decision logic for the selected node, click <emphasis role="strong">Back to "&lt;MODEL_NAME&gt;"</emphasis> to return to the DRD view.</simpara>
</listitem>
<listitem>
<simpara>For the selected DRD node, use the available connection options to create and connect to the next node in the DRD, or click and drag a new node onto the DRD canvas from the left toolbar.</simpara>
<simpara>The node type determines which connection options are supported. For example, an <emphasis role="strong">Input data</emphasis> node can connect to a decision node, knowledge source, or text annotation using the applicable connection type, whereas a <emphasis role="strong">Knowledge source</emphasis> node can connect to any DRD element. A <emphasis role="strong">Decision</emphasis> node can connect only to another decision or a text annotation.</simpara>
<simpara>The following connection types are available, depending on the node type:</simpara>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong">Information requirement</emphasis>: Use this connection from an input data node or decision node to another decision node that requires the information.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Knowledge requirement</emphasis>: Use this connection from a business knowledge model to a decision node or to another business knowledge model that invokes the decision logic.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Authority requirement</emphasis>: Use this connection from an input data node or a decision node to a dependent knowledge source or from a knowledge source to a decision node, business knowledge model, or another knowledge source.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Association</emphasis>: Use this connection from an input data node, decision node, business knowledge model, or knowledge source to a text annotation.</simpara>
</listitem>
</itemizedlist>
<figure>
<title>Connecting credit score input to the credit score rating decision</title>
<mediaobject>
<imageobject>
<imagedata fileref="images/_images/dmn/dmn-input-connection-example.png"/>
</imageobject>
<textobject><phrase>dmn input connection example</phrase></textobject>
</mediaobject>
</figure>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/_images/dmn/dmn-input-connection-example2.png"/>
</imageobject>
<textobject><phrase>dmn input connection example2</phrase></textobject>
</mediaobject>
</informalfigure>
</listitem>
<listitem>
<simpara>Continue adding and defining the remaining DRD components of your decision model. Periodically click <emphasis role="strong">Save</emphasis> in the DMN designer to save your work.</simpara>
</listitem>
<listitem>
<simpara>After you add and define all components of the DRD, click <emphasis role="strong">Save</emphasis> to save and validate the completed DRD.</simpara>
<simpara>The following is an example DRD for a loan prequalification decision model:</simpara>
<figure>
<title>Completed DRD for loan prequalification</title>
<mediaobject>
<imageobject>
<imagedata fileref="images/_images/dmn/dmn-example-drd.png"/>
</imageobject>
<textobject><phrase>dmn example drd</phrase></textobject>
</mediaobject>
</figure>
<simpara>The following is an example DRD for a phone call handling decision model using a reusable decision service:</simpara>
<figure>
<title>Completed DRD for phone call handling with a decision service</title>
<mediaobject>
<imageobject>
<imagedata fileref="images/_images/dmn/dmn-example-drd3.png" contentwidth="90%"/>
</imageobject>
<textobject><phrase>dmn example drd3</phrase></textobject>
</mediaobject>
</figure>
<simpara>In a DMN decision service node, the decision nodes in the bottom segment incorporate input data from outside of the decision service to arrive at a final decision in the top segment of the decision service node. The resulting top-level decisions from the decision service are then implemented in any subsequent decisions or business knowledge requirements of the DMN model. You can reuse DMN decision services in other DMN models to apply the same decision logic with different input data and different outgoing connections.</simpara>
</listitem>
</orderedlist>
<section xml:id="dmn-logic-defining-proc_dmn-models">
<title>Defining DMN decision logic in boxed expressions in Business Central</title>
<simpara>Boxed expressions in DMN are tables that you use to define the underlying logic of decision nodes and business knowledge models in a decision requirements diagram (DRD) or decision requirements graph (DRG). Some boxed expressions can contain other boxed expressions, but the top-level boxed expression corresponds to the decision logic of a single DRD artifact. While DRDs with one or more DRGs represent the flow of a DMN decision model, boxed expressions define the actual decision logic of individual nodes. DRDs and boxed expressions together form a complete and functional DMN decision model.</simpara>
<simpara>You can use the DMN designer in Business Central to define decision logic for your DRD components using built-in boxed expressions.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>You have created or imported a DMN file in Business Central.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>In Business Central, go to <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Design</emphasis> → <emphasis role="strong">Projects</emphasis>, click the project name, and select the DMN file you want to modify.</simpara>
</listitem>
<listitem>
<simpara>In the DMN designer canvas, select a decision node or business knowledge model that you want to define and click the <emphasis role="strong">Edit</emphasis> icon to open the DMN boxed expression designer:</simpara>
<figure>
<title>Opening a new decision node boxed expression</title>
<mediaobject>
<imageobject>
<imagedata fileref="images/_images/dmn/dmn-decision-edit.png"/>
</imageobject>
<textobject><phrase>dmn decision edit</phrase></textobject>
</mediaobject>
</figure>
<figure>
<title>Opening a new business knowledge model boxed expression</title>
<mediaobject>
<imageobject>
<imagedata fileref="images/_images/dmn/dmn-bkm-edit.png"/>
</imageobject>
<textobject><phrase>dmn bkm edit</phrase></textobject>
</mediaobject>
</figure>
<simpara>By default, all business knowledge models are defined as boxed function expressions containing a literal FEEL expression, a nested context expression of an external JAVA or PMML function, or a nested boxed expression of any type.</simpara>
<simpara>For decision nodes, you click the undefined table to select the type of boxed expression you want to use, such as a boxed literal expression, boxed context expression, decision table, or other DMN boxed expression.</simpara>
<figure>
<title>Selecting the logic type for a decision node</title>
<mediaobject>
<imageobject>
<imagedata fileref="images/_images/dmn/dmn-decision-boxed-expression-options.png"/>
</imageobject>
<textobject><phrase>dmn decision boxed expression options</phrase></textobject>
</mediaobject>
</figure>
<simpara>For business knowledge models, you click the top-left function cell to select the function type, or right-click the function value cell, select <emphasis role="strong">Clear</emphasis>, and select a boxed expression of another type.</simpara>
<figure>
<title>Selecting the function or other logic type for a business knowledge model</title>
<mediaobject>
<imageobject>
<imagedata fileref="images/_images/dmn/dmn-bkm-define.png"/>
</imageobject>
<textobject><phrase>dmn bkm define</phrase></textobject>
</mediaobject>
</figure>
</listitem>
<listitem>
<simpara>For this example, use a decision node and select <emphasis role="strong">Decision Table</emphasis> as the boxed expression type.</simpara>
<simpara>A decision table in DMN is a visual representation of one or more rules in a tabular format. Each rule consists of a single row in the table, and includes columns that define the conditions (input) and outcome (output) for that particular row.</simpara>
</listitem>
<listitem>
<simpara>Click the input column header to define the name and data type for the input condition. For example, name the input column <emphasis role="strong">Credit Score.FICO</emphasis> with a <literal>number</literal> data type. This column specifies numeric credit score values or ranges of loan applicants.</simpara>
</listitem>
<listitem>
<simpara>Click the output column header to define the name and data type for the output values. For example, name the output column <emphasis role="strong">Credit Score Rating</emphasis> and next to the <emphasis role="strong">Data Type</emphasis> option, click <emphasis role="strong">Manage</emphasis> to go to the <emphasis role="strong">Data Types</emphasis> page where you can create a custom data type with score ratings as constraints.</simpara>
<figure>
<title>Managing data types for a column header value</title>
<mediaobject>
<imageobject>
<imagedata fileref="images/_images/dmn/dmn-manage-data-types.png"/>
</imageobject>
<textobject><phrase>dmn manage data types</phrase></textobject>
</mediaobject>
</figure>
</listitem>
<listitem>
<simpara>On the <emphasis role="strong">Data Types</emphasis> page, click <emphasis role="strong">Add</emphasis> and create a <emphasis role="strong">Credit_Score_Rating</emphasis> data type as a <literal>string</literal>:</simpara>
<figure>
<title>Adding a new data type</title>
<mediaobject>
<imageobject>
<imagedata fileref="images/_images/dmn/dmn-custom-data-type-add.png"/>
</imageobject>
<textobject><phrase>dmn custom data type add</phrase></textobject>
</mediaobject>
</figure>
</listitem>
<listitem>
<simpara>Click <emphasis role="strong">Constraints</emphasis>, select <emphasis role="strong">Enumeration</emphasis> from the drop-down options, and add the following constraints:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>"Excellent"</literal></simpara>
</listitem>
<listitem>
<simpara><literal>"Good"</literal></simpara>
</listitem>
<listitem>
<simpara><literal>"Fair"</literal></simpara>
</listitem>
<listitem>
<simpara><literal>"Poor"</literal></simpara>
</listitem>
<listitem>
<simpara><literal>"Bad"</literal></simpara>
</listitem>
</itemizedlist>
<figure>
<title>Adding constraints to the new data type</title>
<mediaobject>
<imageobject>
<imagedata fileref="images/_images/dmn/dmn-custom-data-type-constraints.png"/>
</imageobject>
<textobject><phrase>dmn custom data type constraints</phrase></textobject>
</mediaobject>
</figure>
<simpara>For information about constraint types and syntax requirements for the specified data type, see the <link xlink:href="https://www.omg.org/spec/DMN">Decision Model and Notation specification</link>.</simpara>
</listitem>
<listitem>
<simpara>Click <emphasis role="strong">OK</emphasis> to save the constraints and click <emphasis role="strong">Save</emphasis> to save the data type.</simpara>
</listitem>
<listitem>
<simpara>Return to the <emphasis role="strong">Credit Score Rating</emphasis> decision table, click the <emphasis role="strong">Credit Score Rating</emphasis> column header, and set the data type to this new custom data type.</simpara>
</listitem>
<listitem>
<simpara>Use the <emphasis role="strong">Credit Score.FICO</emphasis> input column to define credit score values or ranges of values, and use the <emphasis role="strong">Credit Score Rating</emphasis> column to specify one of the corresponding ratings you defined in the <emphasis role="strong">Credit_Score_Rating</emphasis> data type.</simpara>
<simpara>Right-click any value cell to insert or delete rows (rules) or columns (clauses).</simpara>
<figure>
<title>Decision node decision table for credit score rating</title>
<mediaobject>
<imageobject>
<imagedata fileref="images/_images/dmn/dmn-decision-table-example1a.png"/>
</imageobject>
<textobject><phrase>dmn decision table example1a</phrase></textobject>
</mediaobject>
</figure>
</listitem>
<listitem>
<simpara>After you define all rules, click the top-left corner of the decision table to define the rule <emphasis role="strong">Hit Policy</emphasis> and <emphasis role="strong">Builtin Aggregator</emphasis> (for <emphasis role="strong">COLLECT</emphasis> hit policy only).</simpara>
<simpara>The hit policy determines how to reach an outcome when multiple rules in a decision table match the provided input values. The built-in aggregator determines how to aggregate rule values when you use the <emphasis role="strong">COLLECT</emphasis> hit policy.</simpara>
<figure>
<title>Defining the decision table hit policy</title>
<mediaobject>
<imageobject>
<imagedata fileref="images/_images/dmn/dmn-hit-policies.png"/>
</imageobject>
<textobject><phrase>dmn hit policies</phrase></textobject>
</mediaobject>
</figure>
<simpara>The following example is a more complex decision table that determines applicant qualification for a loan as the concluding decision node in the same loan prequalification decision model:</simpara>
<figure>
<title>Decision table for loan prequalification</title>
<mediaobject>
<imageobject>
<imagedata fileref="images/_images/dmn/dmn-decision-table-example3.png"/>
</imageobject>
<textobject><phrase>dmn decision table example3</phrase></textobject>
</mediaobject>
</figure>
</listitem>
</orderedlist>
<simpara>For boxed expression types other than decision tables, you follow these guidelines similarly to navigate the boxed expression tables and define variables and parameters for decision logic, but according to the requirements of the boxed expression type. Some boxed expressions, such as boxed literal expressions, can be single-column tables, while other boxed expressions, such as function, context, and invocation expressions, can be multi-column tables with nested boxed expressions of other types.</simpara>
<simpara>For example, the following boxed context expression defines the parameters that determine whether a loan applicant can meet minimum mortgage payments based on principal, interest, taxes, and insurance (PITI), represented as a front-end ratio calculation with a sub-context expression:</simpara>
<figure>
<title>Boxed context expression for front-end client PITI ratio</title>
<mediaobject>
<imageobject>
<imagedata fileref="images/_images/dmn/dmn-context-expression-example2.png"/>
</imageobject>
<textobject><phrase>dmn context expression example2</phrase></textobject>
</mediaobject>
</figure>
<simpara>The following boxed function expression determines a monthly mortgage installment as a business knowledge model in a lending decision, with the function value defined as a nested context expression:</simpara>
<figure>
<title>Boxed function expression for installment calculation in business knowledge model</title>
<mediaobject>
<imageobject>
<imagedata fileref="images/_images/dmn/dmn-function-expression-example3.png"/>
</imageobject>
<textobject><phrase>dmn function expression example3</phrase></textobject>
</mediaobject>
</figure>
<simpara>For more information and examples of each boxed expression type, see <xref linkend="dmn-boxed-expressions-con_dmn-models"/>.</simpara>
</section>
<section xml:id="dmn-data-types-defining-proc_dmn-models">
<title>Creating custom data types for DMN boxed expressions in Business Central</title>
<simpara>In DMN boxed expressions in Business Central, data types determine the structure of the data that you use within an associated table, column, or field in the boxed expression. You can use default DMN data types (such as String, Number, Boolean) or you can create custom data types to specify additional fields and constraints that you want to implement for the boxed expression values.</simpara>
<simpara>Custom data types that you create for a boxed expression can be simple or structured:</simpara>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong">Simple</emphasis> data types have only a name and a type assignment. Example: <literal>Age (number)</literal>.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Structured</emphasis> data types contain multiple fields associated with a parent data type. Example: A single type <literal>Person</literal> containing the fields <literal>Name (string)</literal>, <literal>Age (number)</literal>, <literal>Email (string)</literal>.</simpara>
</listitem>
</itemizedlist>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>You have created or imported a DMN file in Business Central.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>In Business Central, go to <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Design</emphasis> → <emphasis role="strong">Projects</emphasis>, click the project name, and select the DMN file you want to modify.</simpara>
</listitem>
<listitem>
<simpara>In the DMN designer canvas, select a decision node or business knowledge model for which you want to define the data types and click the <emphasis role="strong">Edit</emphasis> icon to open the DMN boxed expression designer.</simpara>
</listitem>
<listitem>
<simpara>If the boxed expression is for a decision node that is not yet defined, click the undefined table to select the type of boxed expression you want to use, such as a boxed literal expression, boxed context expression, decision table, or other DMN boxed expression.</simpara>
<figure>
<title>Selecting the logic type for a decision node</title>
<mediaobject>
<imageobject>
<imagedata fileref="images/_images/dmn/dmn-decision-boxed-expression-options.png"/>
</imageobject>
<textobject><phrase>dmn decision boxed expression options</phrase></textobject>
</mediaobject>
</figure>
</listitem>
<listitem>
<simpara>Click the cell for the table header, column header, or parameter field (depending on the boxed expression type) for which you want to define the data type and click <emphasis role="strong">Manage</emphasis> to go to the <emphasis role="strong">Data Types</emphasis> page where you can create a custom data type.</simpara>
<figure>
<title>Managing data types for a column header value</title>
<mediaobject>
<imageobject>
<imagedata fileref="images/_images/dmn/dmn-manage-data-types.png"/>
</imageobject>
<textobject><phrase>dmn manage data types</phrase></textobject>
</mediaobject>
</figure>
<simpara>You can also set and manage custom data types for a specified decision node or business knowledge model node by selecting the <emphasis role="strong">Diagram properties</emphasis> icon in the upper-right corner of the DMN designer:</simpara>
<figure>
<title>Managing data types in diagram properties</title>
<mediaobject>
<imageobject>
<imagedata fileref="images/_images/dmn/dmn-manage-data-types1a.png"/>
</imageobject>
<textobject><phrase>dmn manage data types1a</phrase></textobject>
</mediaobject>
</figure>
<simpara>The data type that you define for a specified cell in a boxed expression determines the structure of the data that you use within that associated table, column, or field in the boxed expression.</simpara>
<simpara>In this example, an output column <emphasis role="strong">Credit Score Rating</emphasis> for a DMN decision table defines a set of custom credit score ratings based on an applicant’s credit score.</simpara>
</listitem>
<listitem>
<simpara>On the <emphasis role="strong">Data Types</emphasis> page, click <emphasis role="strong">Add</emphasis> and create a <emphasis role="strong">Credit_Score_Rating</emphasis> data type as a <literal>string</literal>:</simpara>
<figure>
<title>Adding a new data type</title>
<mediaobject>
<imageobject>
<imagedata fileref="images/_images/dmn/dmn-custom-data-type-add.png"/>
</imageobject>
<textobject><phrase>dmn custom data type add</phrase></textobject>
</mediaobject>
</figure>
<simpara>If the data type requires a list of items, enable the <emphasis role="strong">List</emphasis> setting.</simpara>
</listitem>
<listitem>
<simpara>Click <emphasis role="strong">Constraints</emphasis>, select <emphasis role="strong">Enumeration</emphasis> from the drop-down options, and add the following constraints:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>"Excellent"</literal></simpara>
</listitem>
<listitem>
<simpara><literal>"Good"</literal></simpara>
</listitem>
<listitem>
<simpara><literal>"Fair"</literal></simpara>
</listitem>
<listitem>
<simpara><literal>"Poor"</literal></simpara>
</listitem>
<listitem>
<simpara><literal>"Bad"</literal></simpara>
</listitem>
</itemizedlist>
<figure>
<title>Adding constraints to the new data type</title>
<mediaobject>
<imageobject>
<imagedata fileref="images/_images/dmn/dmn-custom-data-type-constraints.png"/>
</imageobject>
<textobject><phrase>dmn custom data type constraints</phrase></textobject>
</mediaobject>
</figure>
<simpara>For information about constraint types and syntax requirements for the specified data type, see the <link xlink:href="https://www.omg.org/spec/DMN">Decision Model and Notation specification</link>.</simpara>
</listitem>
<listitem>
<simpara>Click <emphasis role="strong">OK</emphasis> to save the constraints and click <emphasis role="strong">Save</emphasis> to save the data type.</simpara>
</listitem>
<listitem>
<simpara>Return to the <emphasis role="strong">Credit Score Rating</emphasis> decision table, click the <emphasis role="strong">Credit Score Rating</emphasis> column header, set the data type to this new custom data type, and define the rule values for that column with the rating constraints that you specified.</simpara>
<figure>
<title>Decision table for credit score rating</title>
<mediaobject>
<imageobject>
<imagedata fileref="images/_images/dmn/dmn-decision-table-example1a.png"/>
</imageobject>
<textobject><phrase>dmn decision table example1a</phrase></textobject>
</mediaobject>
</figure>
<simpara>In the DMN decision model for this scenario, the <emphasis role="strong">Credit Score Rating</emphasis> decision flows into the following <emphasis role="strong">Loan Prequalification</emphasis> decision that also requires custom data types:</simpara>
<figure>
<title>Decision table for loan prequalification</title>
<mediaobject>
<imageobject>
<imagedata fileref="images/_images/dmn/dmn-manage-data-types-blank.png"/>
</imageobject>
<textobject><phrase>dmn manage data types blank</phrase></textobject>
</mediaobject>
</figure>
</listitem>
<listitem>
<simpara>Continuing with this example, return to the <emphasis role="strong">Data Types</emphasis> window, click <emphasis role="strong">Add</emphasis>, and create a <emphasis role="strong">Loan_Qualification</emphasis> data type as a <literal>Structure</literal> with no constraints.</simpara>
<simpara>When you save the new structured data type, the first sub-field appears so that you can begin defining nested data fields in this parent data type. You can use these sub-fields in association with the parent structured data type in boxed expressions, such as nested column headers in decision tables or nested table parameters in context or function expressions.</simpara>
<simpara>For additional sub-fields, next to the <emphasis role="strong">Loan_Qualification</emphasis> data type, select the settings icon (three vertical dots) and select <emphasis role="strong">Insert nested field</emphasis>:</simpara>
<figure>
<title>Adding a new structured data type with nested fields</title>
<mediaobject>
<imageobject>
<imagedata fileref="images/_images/dmn/dmn-manage-data-types-structured.png"/>
</imageobject>
<textobject><phrase>dmn manage data types structured</phrase></textobject>
</mediaobject>
</figure>
</listitem>
<listitem>
<simpara>For this example, under the structured <emphasis role="strong">Loan_Qualification</emphasis> data type, add a <emphasis role="strong">Qualification</emphasis> field with <literal>"Qualified"</literal> and <literal>"Not Qualified"</literal> enumeration constraints, and a <emphasis role="strong">Reason</emphasis> field with no constraints. Add also a simple <emphasis role="strong">Back_End_Ratio</emphasis> and a <emphasis role="strong">Front_End_Ratio</emphasis> data type, both with <literal>"Sufficient"</literal> and <literal>"Insufficient"</literal> enumeration constraints.</simpara>
<simpara>Click <emphasis role="strong">Save</emphasis> for each data type that you create.</simpara>
<figure>
<title>Adding nested data types with constraints</title>
<mediaobject>
<imageobject>
<imagedata fileref="images/_images/dmn/dmn-manage-data-types-structured2.png"/>
</imageobject>
<textobject><phrase>dmn manage data types structured2</phrase></textobject>
</mediaobject>
</figure>
</listitem>
<listitem>
<simpara>Return to the decision table and, for each column, click the column header cell, set the data type to the new corresponding custom data type, and define the rule values as needed for the column with the constraints that you specified, if applicable.</simpara>
<figure>
<title>Decision table for loan prequalification</title>
<mediaobject>
<imageobject>
<imagedata fileref="images/_images/dmn/dmn-decision-table-example3.png"/>
</imageobject>
<textobject><phrase>dmn decision table example3</phrase></textobject>
</mediaobject>
</figure>
</listitem>
</orderedlist>
<simpara>For boxed expression types other than decision tables, you follow these guidelines similarly to navigate the boxed expression tables and define custom data types as needed.</simpara>
<simpara>For example, the following boxed function expression uses custom <literal>tCandidate</literal> and <literal>tProfile</literal> structured data types to associate data for online dating compatibility:</simpara>
<figure>
<title>Boxed function expression for online dating compatibility</title>
<mediaobject>
<imageobject>
<imagedata fileref="images/_images/dmn/dmn-manage-data-types-structured3.png"/>
</imageobject>
<textobject><phrase>dmn manage data types structured3</phrase></textobject>
</mediaobject>
</figure>
<figure>
<title>Custom data type definitions for online dating compatibility</title>
<mediaobject>
<imageobject>
<imagedata fileref="images/_images/dmn/dmn-manage-data-types-structured3a.png"/>
</imageobject>
<textobject><phrase>dmn manage data types structured3a</phrase></textobject>
</mediaobject>
</figure>
<figure>
<title>Parameter definitions with custom data types for online dating compatibility</title>
<mediaobject>
<imageobject>
<imagedata fileref="images/_images/dmn/dmn-manage-data-types-structured3b.png"/>
</imageobject>
<textobject><phrase>dmn manage data types structured3b</phrase></textobject>
</mediaobject>
</figure>
</section>
<section xml:id="dmn-included-models-proc_dmn-models">
<title>Including other DMN models within a DMN file in Business Central</title>
<simpara>In Business Central, you can include other DMN models from your project in a specified DMN file so that you can reuse the decision requirements diagram (DRD) components of the included models in that DMN file. When you include a DMN model within another DMN file, you can use all of the nodes and logic from both models in the same DRD, but you cannot edit the nodes from the included model. To edit nodes from included models, you must update the source file for the included model directly. All changes to the source of the included model are automatically applied across DMN files that include that model.</simpara>
<simpara>You cannot include DMN models from other projects in Business Central.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>You have created or imported the DMN models in the same project in Business Central as the DMN file in which you want to include the models.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>In Business Central, go to <emphasis role="strong">Menu</emphasis> → <emphasis role="strong">Design</emphasis> → <emphasis role="strong">Projects</emphasis>, click the project name, and select the DMN file you want to modify.</simpara>
</listitem>
<listitem>
<simpara>In the DMN designer, click the <emphasis role="strong">Included Models</emphasis> tab.</simpara>
</listitem>
<listitem>
<simpara>Click <emphasis role="strong">Include Model</emphasis>, select a DMN model from your project in the <emphasis role="strong">DMN models</emphasis> list, enter a unique name for the included model, and click <emphasis role="strong">Include</emphasis>:</simpara>
<figure>
<title>Including a DMN model</title>
<mediaobject>
<imageobject>
<imagedata fileref="images/_images/dmn/dmn-include-model.png"/>
</imageobject>
<textobject><phrase>dmn include model</phrase></textobject>
</mediaobject>
</figure>
<simpara>The DMN model is added to this DMN file, and all DRD nodes from the included model are listed under <emphasis role="strong">Decision Components</emphasis> in the <emphasis role="strong">Decision Navigator</emphasis> view:</simpara>
<figure>
<title>DMN file with decision components from the included DMN model</title>
<mediaobject>
<imageobject>
<imagedata fileref="images/_images/dmn/dmn-include-model-list.png"/>
</imageobject>
<textobject><phrase>dmn include model list</phrase></textobject>
</mediaobject>
</figure>
<simpara>All data types from the included model are also listed in the <emphasis role="strong">Data Types</emphasis> tab for the DMN file:</simpara>
<figure>
<title>DMN file with data types from the included DMN model</title>
<mediaobject>
<imageobject>
<imagedata fileref="images/_images/dmn/dmn-include-model-data-types.png"/>
</imageobject>
<textobject><phrase>dmn include model data types</phrase></textobject>
</mediaobject>
</figure>
</listitem>
<listitem>
<simpara>In the <emphasis role="strong">Model</emphasis> tab of the DMN designer, click and drag the included DRD components onto the canvas to begin implementing them in your DRD:</simpara>
<figure>
<title>Adding DRD components from the included DMN model</title>
<mediaobject>
<imageobject>
<imagedata fileref="images/_images/dmn/dmn-include-model-drd.png"/>
</imageobject>
<textobject><phrase>dmn include model drd</phrase></textobject>
</mediaobject>
</figure>
<simpara>To edit DRD nodes or data types from included models, you must update the source file for the included model directly. All changes to the source of the included model are automatically applied across DMN files that include that model.</simpara>
<simpara>To edit the included model name or to remove the included model from the DMN file, use the <emphasis role="strong">Included Models</emphasis> tab in the DMN designer.</simpara>
<important>
<simpara>When you remove an included model, any nodes from that included model that are currently used in the DRD are also removed.</simpara>
</important>
</listitem>
</orderedlist>
</section>
<section xml:id="dmn-designer-nav-ref_dmn-models">
<title>DMN designer navigation and properties in Business Central</title>
<simpara>The DMN designer in Business Central provides the following additional features to help you navigate through the components and properties of decision requirements diagrams (DRDs).</simpara>
<variablelist>
<varlistentry>
<term>DMN file and diagram views</term>
<listitem>
<simpara>In the upper-left corner of the DMN designer, select the <emphasis role="strong">Project Explorer</emphasis> view to navigate between all DMN and other files or select the <emphasis role="strong">Decision Navigator</emphasis> view to navigate between the decision components, graphs, and boxed expressions of a selected DRD:</simpara>
<figure>
<title>Project Explorer view</title>
<mediaobject>
<imageobject>
<imagedata fileref="images/_images/dmn/dmn-designer-project-view.png"/>
</imageobject>
<textobject><phrase>dmn designer project view</phrase></textobject>
</mediaobject>
</figure>
<figure>
<title>Decision Navigator view</title>
<mediaobject>
<imageobject>
<imagedata fileref="images/_images/dmn/dmn-designer-nav-view.png"/>
</imageobject>
<textobject><phrase>dmn designer nav view</phrase></textobject>
</mediaobject>
</figure>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/_images/dmn/dmn-designer-nav-view2.png"/>
</imageobject>
<textobject><phrase>dmn designer nav view2</phrase></textobject>
</mediaobject>
</informalfigure>
<note>
<simpara>The DRD components from any DMN models included in the DMN file (in the <emphasis role="strong">Included Models</emphasis> tab) are also listed in the <emphasis role="strong">Decision Components</emphasis> panel for the DMN file.</simpara>
</note>
<simpara>In the upper-right corner of the DMN designer, select the <emphasis role="strong">Explore diagram</emphasis> icon to view an elevated preview of the selected DRD and to navigate between the nodes of the selected DRD:</simpara>
<figure>
<title>Explore diagram view</title>
<mediaobject>
<imageobject>
<imagedata fileref="images/_images/dmn/dmn-designer-preview.png"/>
</imageobject>
<textobject><phrase>dmn designer preview</phrase></textobject>
</mediaobject>
</figure>
</listitem>
</varlistentry>
<varlistentry>
<term>DRD properties and design</term>
<listitem>
<simpara>In the upper-right corner of the DMN designer, select the <emphasis role="strong">Diagram properties</emphasis> icon to modify the identifying information, data types, and appearance of a selected DRD, DRD node, or boxed expression cell:</simpara>
<figure>
<title>DRD node properties</title>
<mediaobject>
<imageobject>
<imagedata fileref="images/_images/dmn/dmn-designer-properties.png"/>
</imageobject>
<textobject><phrase>dmn designer properties</phrase></textobject>
</mediaobject>
</figure>
<simpara>To view the properties of the entire DRD, click the DRD canvas background instead of a specific node.</simpara>
</listitem>
</varlistentry>
</variablelist>
</section>
</chapter>
<chapter xml:id="dmn-execution-con">
<title>DMN model execution</title>
<simpara>You can create or import DMN files in your Red Hat Decision Manager project using Business Central or package the DMN files as part of your project knowledge JAR (KJAR) file without Business Central. After you implement your DMN files in your Red Hat Decision Manager project, you can execute the DMN decision service by deploying the KIE container that contains it to Decision Server for remote access
or by manipulating the KIE container directly as a dependency of the calling application. Other options for creating and deploying DMN knowledge packages are also available, and most are similar for all types of knowledge assets, such as DRL files or process definitions.</simpara>
<simpara>For information about including external DMN assets with your project packaging and deployment method, see
<link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_decision_manager/7.5/html-single/packaging_and_deploying_a_red_hat_decision_manager_project"><emphasis>Packaging and deploying a Red Hat Decision Manager project</emphasis></link>.</simpara>
<section xml:id="dmn-execution-embedded-proc">
<title>Embedding a DMN call directly in a Java application</title>
<simpara>A KIE container is local when the knowledge assets are either embedded directly into the calling program or are physically pulled in using Maven dependencies for the KJAR. You typically embed knowledge assets directly into a project if there is a tight relationship between the version of the code and the version of the DMN definition. Any changes to the decision take effect after you have intentionally updated and redeployed the application. A benefit of this approach is that proper operation does not rely on any external dependencies to the run time, which can be a limitation of locked-down environments.</simpara>
<simpara>Using Maven dependencies enables further flexibility because the specific version of the decision can dynamically change, (for example, by using a system property), and it can be periodically scanned for updates and automatically updated. This introduces an external dependency on the deploy time of the service, but executes the decision locally, reducing reliance on an external service being available during run time.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>A KIE container is deployed in Decision Server in the form of a KJAR that includes the DMN model, ideally compiled as an executable model for more efficient execution:</simpara>
<screen>mvn clean install -DgenerateDMNModel=yes</screen>
<simpara>For more information about project packaging and deployment and executable models, see
<link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_decision_manager/7.5/html-single/packaging_and_deploying_a_red_hat_decision_manager_project"><emphasis>Packaging and deploying a Red Hat Decision Manager project</emphasis></link>.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>In your client application, add the following dependencies to the relevant classpath of your Java project:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;!-- Required for the DMN runtime API --&gt;
&lt;dependency&gt;
  &lt;groupId&gt;org.kie&lt;/groupId&gt;
  &lt;artifactId&gt;kie-dmn-core&lt;/artifactId&gt;
  &lt;version&gt;${rhdm.version}&lt;/version&gt;
&lt;/dependency&gt;

&lt;!-- Required if not using classpath KIE container --&gt;
&lt;dependency&gt;
  &lt;groupId&gt;org.kie&lt;/groupId&gt;
  &lt;artifactId&gt;kie-ci&lt;/artifactId&gt;
  &lt;version&gt;${rhdm.version}&lt;/version&gt;
&lt;/dependency&gt;</programlisting>
<simpara>The <literal>&lt;version&gt;</literal> is the Maven artifact version for Red Hat Decision Manager currently used in your project (for example, 7.26.0.Final-redhat-00002).</simpara>
<note>
<simpara>Instead of specifying a Red Hat Decision Manager <literal>&lt;version&gt;</literal> for individual dependencies, consider adding the Red Hat Business Automation bill of materials (BOM) dependency to your project <literal>pom.xml</literal> file. The Red Hat Business Automation BOM applies to both Red Hat Decision Manager and Red Hat Process Automation Manager. When you add the BOM files, the correct versions of transitive dependencies from the provided Maven repositories are included in the project.</simpara>
<simpara>Example BOM dependency:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;dependency&gt;
  &lt;groupId&gt;com.redhat.ba&lt;/groupId&gt;
  &lt;artifactId&gt;ba-platform-bom&lt;/artifactId&gt;
  &lt;version&gt;7.5.0.GA-redhat-00002&lt;/version&gt;
  &lt;scope&gt;import&lt;/scope&gt;
  &lt;type&gt;pom&lt;/type&gt;
&lt;/dependency&gt;</programlisting>
<simpara>For more information about the Red Hat Business Automation BOM, see
<link xlink:href="https://access.redhat.com/solutions/3363991">What is the mapping between RHDM product and maven library version?</link>.</simpara>
</note>
</listitem>
<listitem>
<simpara>Create a KIE container from <literal>classpath</literal> or <literal>ReleaseId</literal>:</simpara>
<programlisting language="java" linenumbering="unnumbered">KieServices kieServices = KieServices.Factory.get();

ReleaseId releaseId = kieServices.newReleaseId( "org.acme", "my-kjar", "1.0.0" );
KieContainer kieContainer = kieServices.newKieContainer( releaseId );</programlisting>
<simpara>Alternative option:</simpara>
<programlisting language="java" linenumbering="unnumbered">KieServices kieServices = KieServices.Factory.get();

KieContainer kieContainer = kieServices.getKieClasspathContainer();</programlisting>
</listitem>
<listitem>
<simpara>Obtain <literal>DMNRuntime</literal> from the KIE container and a reference to the DMN model to be evaluated, by using the model <literal>namespace</literal> and <literal>modelName</literal>:</simpara>
<programlisting language="java" linenumbering="unnumbered">DMNRuntime dmnRuntime = KieRuntimeFactory.of(kieContainer.getKieBase()).get(DMNRuntime.class);

String namespace = "http://www.redhat.com/_c7328033-c355-43cd-b616-0aceef80e52a";
String modelName = "dmn-movieticket-ageclassification";

DMNModel dmnModel = dmnRuntime.getModel(namespace, modelName);</programlisting>
</listitem>
<listitem>
<simpara>Execute the decision services for the desired model:</simpara>
<programlisting language="java" linenumbering="unnumbered">DMNContext dmnContext = dmnRuntime.newContext();  <co xml:id="CO1-1"/>

for (Integer age : Arrays.asList(1,12,13,64,65,66)) {
    dmnContext.set("Age", age);  <co xml:id="CO1-2"/>
    DMNResult dmnResult =
        dmnRuntime.evaluateAll(dmnModel, dmnContext);  <co xml:id="CO1-3"/>

    for (DMNDecisionResult dr : dmnResult.getDecisionResults()) {  <co xml:id="CO1-4"/>
        log.info("Age: " + age + ", " +
                 "Decision: '" + dr.getDecisionName() + "', " +
                 "Result: " + dr.getResult());
  }
}</programlisting>
<calloutlist>
<callout arearefs="CO1-1">
<para>Instantiate a new DMN Context to be the input for the model evaluation. Note that this example is looping through the Age Classification decision multiple times.</para>
</callout>
<callout arearefs="CO1-2">
<para>Assign input variables for the input DMN context.</para>
</callout>
<callout arearefs="CO1-3">
<para>Evaluate all DMN decisions defined in the DMN model.</para>
</callout>
<callout arearefs="CO1-4">
<para>Each evaluation may result in one or more results, creating the loop.</para>
</callout>
</calloutlist>
<simpara>This example prints the following output:</simpara>
<screen>Age 1 Decision 'AgeClassification' : Child
Age 12 Decision 'AgeClassification' : Child
Age 13 Decision 'AgeClassification' : Adult
Age 64 Decision 'AgeClassification' : Adult
Age 65 Decision 'AgeClassification' : Senior
Age 66 Decision 'AgeClassification' : Senior</screen>
<simpara>If the DMN model was not previously compiled as an executable model for more efficient execution, you can enable the following property when you execute your DMN models:</simpara>
<screen>-Dorg.kie.dmn.compiler.execmodel=true</screen>
</listitem>
</orderedlist>
</section>
<section xml:id="dmn-execution-remote-java-proc">
<title>Executing a DMN service using the Decision Server Java client API</title>
<simpara>The Decision Server Java client API provides a lightweight approach to invoking a remote DMN service either through the REST or JMS interfaces of Decision Server. This approach reduces the number of runtime dependencies necessary to interact with a KIE base. Decoupling the calling code from the decision definition also increases flexibility by enabling them to iterate independently at the appropriate pace.</simpara>
<simpara>For more information about the Decision Server Java client API, see
<link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_decision_manager/7.5/html-single/interacting_with_red_hat_decision_manager_using_kie_apis"><emphasis>Interacting with Red Hat Decision Manager using KIE APIs</emphasis></link>.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>Decision Server is installed and configured, including a known user name and credentials for a user with the <literal>kie-server</literal> role. For installation options, see
<link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_decision_manager/7.5/html-single/planning_a_red_hat_decision_manager_installation"><emphasis>Planning a Red Hat Decision Manager installation</emphasis></link>.</simpara>
</listitem>
<listitem>
<simpara>A KIE container is deployed in Decision Server in the form of a KJAR that includes the DMN model, ideally compiled as an executable model for more efficient execution:</simpara>
<screen>mvn clean install -DgenerateDMNModel=yes</screen>
<simpara>For more information about project packaging and deployment and executable models, see
<link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_decision_manager/7.5/html-single/packaging_and_deploying_a_red_hat_decision_manager_project"><emphasis>Packaging and deploying a Red Hat Decision Manager project</emphasis></link>.</simpara>
</listitem>
<listitem>
<simpara>You have the container ID of the KIE container containing the DMN model. If more than one model is present, you must also know the model namespace and model name of the relevant model.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>In your client application, add the following dependency to the relevant classpath of your Java project:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;!-- Required for the Decision Server Java client API --&gt;
&lt;dependency&gt;
  &lt;groupId&gt;org.kie.server&lt;/groupId&gt;
  &lt;artifactId&gt;kie-server-client&lt;/artifactId&gt;
  &lt;version&gt;${rhdm.version}&lt;/version&gt;
&lt;/dependency&gt;</programlisting>
<simpara>The <literal>&lt;version&gt;</literal> is the Maven artifact version for Red Hat Decision Manager currently used in your project (for example, 7.26.0.Final-redhat-00002).</simpara>
<note>
<simpara>Instead of specifying a Red Hat Decision Manager <literal>&lt;version&gt;</literal> for individual dependencies, consider adding the Red Hat Business Automation bill of materials (BOM) dependency to your project <literal>pom.xml</literal> file. The Red Hat Business Automation BOM applies to both Red Hat Decision Manager and Red Hat Process Automation Manager. When you add the BOM files, the correct versions of transitive dependencies from the provided Maven repositories are included in the project.</simpara>
<simpara>Example BOM dependency:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;dependency&gt;
  &lt;groupId&gt;com.redhat.ba&lt;/groupId&gt;
  &lt;artifactId&gt;ba-platform-bom&lt;/artifactId&gt;
  &lt;version&gt;7.5.0.GA-redhat-00002&lt;/version&gt;
  &lt;scope&gt;import&lt;/scope&gt;
  &lt;type&gt;pom&lt;/type&gt;
&lt;/dependency&gt;</programlisting>
<simpara>For more information about the Red Hat Business Automation BOM, see
<link xlink:href="https://access.redhat.com/solutions/3363991">What is the mapping between RHDM product and maven library version?</link>.</simpara>
</note>
</listitem>
<listitem>
<simpara>Instantiate a <literal>KieServicesClient</literal> instance with the appropriate connection information.</simpara>
<simpara>Example:</simpara>
<programlisting language="java" linenumbering="unnumbered">KieServicesConfiguration conf =
    KieServicesFactory.newRestConfiguration(URL, USER, PASSWORD); <co xml:id="CO2-1"/>

conf.setMarshallingFormat(MarshallingFormat.JSON);  <co xml:id="CO2-2"/>

KieServicesClient kieServicesClient = KieServicesFactory.newKieServicesClient(conf);</programlisting>
<calloutlist>
<callout arearefs="CO2-1">
<para>The connection information:</para>
<itemizedlist>
<listitem>
<simpara>Example URL: <literal>http://localhost:8080/kie-server/services/rest/server</literal></simpara>
</listitem>
<listitem>
<simpara>The credentials should reference a user with the <literal>kie-server</literal> role.</simpara>
</listitem>
</itemizedlist>
</callout>
<callout arearefs="CO2-2">
<para>The Marshalling format is an instance of <literal>org.kie.server.api.marshalling.MarshallingFormat</literal>. It controls whether the messages will be JSON or XML. Options for Marshalling format are JSON, JAXB, or XSTREAM.</para>
</callout>
</calloutlist>
</listitem>
<listitem>
<simpara>Obtain a <literal>DMNServicesClient</literal> from the KIE server Java client connected to the related Decision Server by invoking the method <literal>getServicesClient()</literal> on the KIE server Java client instance:</simpara>
<programlisting language="java" linenumbering="unnumbered">DMNServicesClient dmnClient = kieServicesClient.getServicesClient(DMNServicesClient.class );</programlisting>
<simpara>The <literal>dmnClient</literal> can now execute decision services on Decision Server.</simpara>
</listitem>
<listitem>
<simpara>Execute the decision services for the desired model.</simpara>
<simpara>Example:</simpara>
<programlisting language="java" linenumbering="unnumbered">for (Integer age : Arrays.asList(1,12,13,64,65,66)) {
    DMNContext dmnContext = dmnClient.newContext(); <co xml:id="CO3-1"/>
    dmnContext.set("Age", age);  <co xml:id="CO3-2"/>
    ServiceResponse&lt;DMNResult&gt; serverResp =   <co xml:id="CO3-3"/>
        dmnClient.evaluateAll($kieContainerId,
                              $modelNamespace,
                              $modelName,
                              dmnContext);

    DMNResult dmnResult = serverResp.getResult();  <co xml:id="CO3-4"/>
    for (DMNDecisionResult dr : dmnResult.getDecisionResults()) {
        log.info("Age: " + age + ", " +
                 "Decision: '" + dr.getDecisionName() + "', " +
                 "Result: " + dr.getResult());
    }
}</programlisting>
<calloutlist>
<callout arearefs="CO3-1">
<para>Instantiate a new DMN Context to be the input for the model evaluation. Note that this example is looping through the Age Classification decision multiple times.</para>
</callout>
<callout arearefs="CO3-2">
<para>Assign input variables for the input DMN Context.</para>
</callout>
<callout arearefs="CO3-3">
<para>Evaluate all the DMN Decisions defined in the DMN model:</para>
<itemizedlist>
<listitem>
<simpara><literal>$kieContainerId</literal> is the ID of the container where the KJAR containing the DMN model is deployed</simpara>
</listitem>
<listitem>
<simpara><literal>$modelNamespace</literal> is the namespace for the model.</simpara>
</listitem>
<listitem>
<simpara><literal>$modelName</literal> is the name for the model.</simpara>
</listitem>
</itemizedlist>
</callout>
<callout arearefs="CO3-4">
<para>The DMN Result object is available from the server response.</para>
</callout>
</calloutlist>
<simpara>At this point, the <literal>dmnResult</literal> contains all the decision results from the evaluated DMN model.</simpara>
<simpara>You can also execute only a specific DMN decision in the model by using alternative methods of the <literal>DMNServicesClient</literal>.</simpara>
<note>
<simpara>If the KIE container only contains one DMN model, you can omit <literal>$modelNamespace</literal> and <literal>$modelName</literal> because the Decision Server API selects it by default.</simpara>
</note>
</listitem>
</orderedlist>
</section>
<section xml:id="dmn-execution-rest-proc">
<title>Executing a DMN service using the Decision Server REST API</title>
<simpara>Directly interacting with the REST endpoints of Decision Server provides the most separation between the calling code and the decision logic definition. The calling code is completely free of direct dependencies, and you can implement it in an entirely different development platform such as <literal>node.js</literal> or <literal>.net</literal>. The examples in this section demonstrate Nix-style curl commands but provide relevant information to adapt to any REST client.</simpara>
<simpara>For more information about the Decision Server REST API, see
<link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_decision_manager/7.5/html-single/interacting_with_red_hat_decision_manager_using_kie_apis"><emphasis>Interacting with Red Hat Decision Manager using KIE APIs</emphasis></link>.</simpara>
<itemizedlist>
<title>Prerequisites</title>
<listitem>
<simpara>Decision Server is installed and configured, including a known user name and credentials for a user with the <literal>kie-server</literal> role. For installation options, see
<link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_decision_manager/7.5/html-single/planning_a_red_hat_decision_manager_installation"><emphasis>Planning a Red Hat Decision Manager installation</emphasis></link>.</simpara>
</listitem>
<listitem>
<simpara>A KIE container is deployed in Decision Server in the form of a KJAR that includes the DMN model, ideally compiled as an executable model for more efficient execution:</simpara>
<screen>mvn clean install -DgenerateDMNModel=yes</screen>
<simpara>For more information about project packaging and deployment and executable models, see
<link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_decision_manager/7.5/html-single/packaging_and_deploying_a_red_hat_decision_manager_project"><emphasis>Packaging and deploying a Red Hat Decision Manager project</emphasis></link>.</simpara>
</listitem>
<listitem>
<simpara>You have the container ID of the KIE container containing the DMN model. If more than one model is present, you must also know the model namespace and model name of the relevant model.</simpara>
</listitem>
<listitem>
<simpara>You have the DMN model deployed. For more information about project deployment, see
<link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_decision_manager/7.5/html-single/packaging_and_deploying_a_red_hat_decision_manager_project#project-build-deploy-central-proc_packaging-deploying"><emphasis>Packaging and deploying a Red Hat Decision Manager project</emphasis></link>.</simpara>
</listitem>
</itemizedlist>
<orderedlist numeration="arabic">
<title>Procedure</title>
<listitem>
<simpara>Determine the base URL for accessing the Decision Server REST API endpoints. This requires knowing the following values (with the default local deployment values as an example):</simpara>
<itemizedlist>
<listitem>
<simpara>Host (<literal>localhost</literal>)</simpara>
</listitem>
<listitem>
<simpara>Port (<literal>8080</literal>)</simpara>
</listitem>
<listitem>
<simpara>Root context (<literal>kie-server</literal>)</simpara>
</listitem>
<listitem>
<simpara>Base REST path (<literal>services/rest/</literal>)</simpara>
</listitem>
</itemizedlist>
<simpara>Example base URL in local deployment:</simpara>
<simpara><literal>http://localhost:8080/kie-server/services/rest/</literal></simpara>
</listitem>
<listitem>
<simpara>Determine user authentication requirements.</simpara>
<simpara>When users are defined directly in the Decision Server configuration, HTTP Basic authentication is used and requires the user name and password. Successful requests require that the user have the <literal>kie-server</literal> role.</simpara>
<simpara>The following example demonstrates how to add credentials to a curl request:</simpara>
<screen>curl -u username:password &lt;request&gt;</screen>
<simpara>If Decision Server is configured with Red Hat Single Sign-On, the request must include a bearer token:</simpara>
<programlisting language="java" linenumbering="unnumbered">curl -H "Authorization: bearer $TOKEN" &lt;request&gt;</programlisting>
</listitem>
<listitem>
<simpara>Specify the format of the request and response. The REST API endpoints work with both JSON and XML formats and are set using request headers:</simpara>
<formalpara>
<title>JSON</title>
<para>
<screen>curl -H "accept: application/json" -H "content-type: application/json"</screen>
</para>
</formalpara>
<formalpara>
<title>XML</title>
<para>
<screen>curl -H "accept: application/xml" -H "content-type: application/xml"</screen>
</para>
</formalpara>
</listitem>
<listitem>
<simpara>(Optional) Query the container for a list of deployed decision models:</simpara>
<simpara><emphasis role="strong">[GET]</emphasis> <literal>server/containers/{containerId}/dmn</literal></simpara>
<simpara>Example curl request:</simpara>
<screen>curl -u krisv:krisv -H "accept: application/xml" -X GET "http://localhost:8080/kie-server/services/rest/server/containers/MovieDMNContainer/dmn"</screen>
<simpara>Sample XML output:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?&gt;
&lt;response type="SUCCESS" msg="OK models successfully retrieved from container 'MovieDMNContainer'"&gt;
    &lt;dmn-model-info-list&gt;
        &lt;model&gt;
            &lt;model-namespace&gt;http://www.redhat.com/_c7328033-c355-43cd-b616-0aceef80e52a&lt;/model-namespace&gt;
            &lt;model-name&gt;dmn-movieticket-ageclassification&lt;/model-name&gt;
            &lt;model-id&gt;_99&lt;/model-id&gt;
            &lt;decisions&gt;
                &lt;dmn-decision-info&gt;
                    &lt;decision-id&gt;_3&lt;/decision-id&gt;
                    &lt;decision-name&gt;AgeClassification&lt;/decision-name&gt;
                &lt;/dmn-decision-info&gt;
            &lt;/decisions&gt;
        &lt;/model&gt;
    &lt;/dmn-model-info-list&gt;
&lt;/response&gt;</programlisting>
<simpara>Sample JSON output:</simpara>
<programlisting language="json" linenumbering="unnumbered">{
  "type" : "SUCCESS",
  "msg" : "OK models successfully retrieved from container 'MovieDMNContainer'",
  "result" : {
    "dmn-model-info-list" : {
      "models" : [ {
        "model-namespace" : "http://www.redhat.com/_c7328033-c355-43cd-b616-0aceef80e52a",
        "model-name" : "dmn-movieticket-ageclassification",
        "model-id" : "_99",
        "decisions" : [ {
          "decision-id" : "_3",
          "decision-name" : "AgeClassification"
        } ]
      } ]
    }
  }
}</programlisting>
</listitem>
<listitem>
<simpara>Execute the model:</simpara>
<simpara><emphasis role="strong">[POST]</emphasis> <literal>server/containers/{containerId}/dmn</literal></simpara>
<simpara>Example curl request:</simpara>
<screen>curl -u krisv:krisv -H "accept: application/json" -H "content-type: application/json" -X POST "http://localhost:8080/kie-server/services/rest/server/containers/MovieDMNContainer/dmn" -d "{ \"model-namespace\" : \"http://www.redhat.com/_c7328033-c355-43cd-b616-0aceef80e52a\", \"model-name\" : \"dmn-movieticket-ageclassification\", \"decision-name\" : [ ], \"decision-id\" : [ ], \"dmn-context\" : {\"Age\" : 66}}"</screen>
<simpara>Example JSON request:</simpara>
<programlisting language="json" linenumbering="unnumbered">{
  "model-namespace" : "http://www.redhat.com/_c7328033-c355-43cd-b616-0aceef80e52a",
  "model-name" : "dmn-movieticket-ageclassification",
  "decision-name" : [ ],
  "decision-id" : [ ],
  "dmn-context" : {"Age" : 66}
}</programlisting>
<simpara>Example XML request (JAXB format):</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;dmn-evaluation-context&gt;
    &lt;model-namespace&gt;http://www.redhat.com/_c7328033-c355-43cd-b616-0aceef80e52a&lt;/model-namespace&gt;
    &lt;model-name&gt;dmn-movieticket-ageclassification&lt;/model-name&gt;
    &lt;dmn-context xsi:type="jaxbListWrapper" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
        &lt;type&gt;MAP&lt;/type&gt;
        &lt;element xsi:type="jaxbStringObjectPair" key="Age"&gt;
            &lt;value xsi:type="xs:int" xmlns:xs="http://www.w3.org/2001/XMLSchema"&gt;66&lt;/value&gt;
        &lt;/element&gt;
    &lt;/dmn-context&gt;
&lt;/dmn-evaluation-context&gt;</programlisting>
<note>
<simpara>Regardless of the request format, the request requires the following elements:</simpara>
<itemizedlist>
<listitem>
<simpara>Model namespace</simpara>
</listitem>
<listitem>
<simpara>Model name</simpara>
</listitem>
<listitem>
<simpara>Context object containing input values</simpara>
</listitem>
</itemizedlist>
</note>
<simpara>Example JSON response:</simpara>
<programlisting language="json" linenumbering="unnumbered">{
  "type" : "SUCCESS",
  "msg" : "OK from container 'MovieDMNContainer'",
  "result" : {
    "dmn-evaluation-result" : {
      "messages" : [ ],
      "model-namespace" : "http://www.redhat.com/_c7328033-c355-43cd-b616-0aceef80e52a",
      "model-name" : "dmn-movieticket-ageclassification",
      "decision-name" : [ ],
      "dmn-context" : {
        "Age" : 66,
        "AgeClassification" : "Senior"
      },
      "decision-results" : {
        "_3" : {
          "messages" : [ ],
          "decision-id" : "_3",
          "decision-name" : "AgeClassification",
          "result" : "Senior",
          "status" : "SUCCEEDED"
        }
      }
    }
  }
}</programlisting>
<simpara>Example XML (JAXB format) response:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?&gt;
&lt;response type="SUCCESS" msg="OK from container 'MovieDMNContainer'"&gt;
      &lt;dmn-evaluation-result&gt;
            &lt;model-namespace&gt;http://www.redhat.com/_c7328033-c355-43cd-b616-0aceef80e52a&lt;/model-namespace&gt;
            &lt;model-name&gt;dmn-movieticket-ageclassification&lt;/model-name&gt;
            &lt;dmn-context xsi:type="jaxbListWrapper" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
                  &lt;type&gt;MAP&lt;/type&gt;
                  &lt;element xsi:type="jaxbStringObjectPair" key="Age"&gt;
                        &lt;value xsi:type="xs:int" xmlns:xs="http://www.w3.org/2001/XMLSchema"&gt;66&lt;/value&gt;
                  &lt;/element&gt;
                  &lt;element xsi:type="jaxbStringObjectPair" key="AgeClassification"&gt;
                        &lt;value xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema"&gt;Senior&lt;/value&gt;
                  &lt;/element&gt;
            &lt;/dmn-context&gt;
            &lt;messages/&gt;
            &lt;decisionResults&gt;
                  &lt;entry&gt;
                        &lt;key&gt;_3&lt;/key&gt;
                        &lt;value&gt;
                              &lt;decision-id&gt;_3&lt;/decision-id&gt;
                              &lt;decision-name&gt;AgeClassification&lt;/decision-name&gt;
                              &lt;result xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;Senior&lt;/result&gt;
                              &lt;messages/&gt;
                              &lt;status&gt;SUCCEEDED&lt;/status&gt;
                        &lt;/value&gt;
                  &lt;/entry&gt;
            &lt;/decisionResults&gt;
      &lt;/dmn-evaluation-result&gt;
&lt;/response&gt;</programlisting>
</listitem>
</orderedlist>
</section>
</chapter>
<chapter xml:id="additional_resources" remap="_additional_resources">
<title>Additional resources</title>
<itemizedlist>
<listitem>
<simpara><link xlink:href="https://www.omg.org/spec/DMN">Decision Model and Notation specification</link></simpara>
</listitem>
<listitem>
<simpara><link xlink:href="https://dmn-tck.github.io/tck/">DMN Technology Compatibility Kit</link></simpara>
</listitem>
<listitem>
<simpara><link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_decision_manager/7.5/html-single/packaging_and_deploying_a_red_hat_decision_manager_project"><emphasis>Packaging and deploying a Red Hat Decision Manager project</emphasis></link></simpara>
</listitem>
<listitem>
<simpara><link xlink:href="https://access.redhat.com/documentation/en-us/red_hat_decision_manager/7.5/html-single/interacting_with_red_hat_decision_manager_using_kie_apis"><emphasis>Interacting with Red Hat Decision Manager using KIE APIs</emphasis></link></simpara>
</listitem>
</itemizedlist>
</chapter>
<appendix xml:id="versioning-information">
<title>Versioning information</title>
<simpara>Documentation last updated on Monday, August 12, 2019.</simpara>
</appendix>
</book>
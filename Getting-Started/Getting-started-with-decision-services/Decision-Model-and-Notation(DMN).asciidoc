[id='gs-dmn-con']

:replaceWith: ds-dmn-con.asciidoc
link: ../../Authorising-Rules/Designing-a-decision-service-using-DMN-models/Decision-Model-and-Notation-DMN/Decision-Model-and-Notation-DMN.asciidoc [Decision Model and Notation]

[id='gs-dmn-gs-creating-drd-proc']
= Creating the traffic violations DMN decision requirements diagram (DRD)

A decision requirements diagram (DRD) is a visual representation of your DMN model. Use the  DMN designer in {CENTRAL} to design the DRD for the traffic violations project and to define the decision logic of the DRD components.

.DRD for the Traffic Violations example
image::dmn/dmn-traffic-violations-drd.png[]

.Prerequisites
* You have created the traffic violations project in {CENTRAL}.

.Procedure
. On the *traffic-violation* project's home page, click *Add Asset*.
. On the *Add Asset* page, click *DMN*. The *Create new DMN* window is opened.
.. In the *Create new DMN* window, enter `Traffic Violation` in the *DMN* name field.
.. From the *Package* list, select `org.kie.example.traffic.traffic_violation`.
.. Click *Ok*. The DMN asset in the DMN designer is opened.
. In the DMN designer canvas, drag two *DMN Input Data* input nodes on to the canvas.
. Double-click each input node and rename one to `Driver` and the other to `Violation`.
. Drag a *DMN Decision* decision node on to the canvas.
. Double-click the decision node and rename it to `Fine`.
. Click the *Violation* input node, select the *Create DMN Information Requirement* icon and click the `Fine` decision node to link the two nodes.
. Drag a *DMN Decision* decision node on to the canvas.
. Double-click the decision node and rename it to `Should the driver be suspended?`.
. Click the *Driver* input node, select the *Create DMN Information Requirement* icon and click the *Should the driver be suspended?* decision node to link the two nodes.
. Click the *Fine* decision node, select the *Create DMN Information Requirement* icon, and select the *Should the driver be suspended?* decision node.
. Click *Save* and click *Save* again to confirm.

[id='gs-dmn-gs-creating-custom-datatypes-proc']
= Creating the traffic violations DMN custom data types

DMN data types determine the structure of the data that you use within a table, column, or field in a DMN boxed expression for defining decision logic. You can use default DMN data types (such as string, number, or boolean) or you can create custom data types to specify additional fields and constraints that you want to implement for the boxed expression values. Use the DMN designer's *Data Types* tab in {CENTRAL} to define the custom data types for the traffic violations project.

.The custom data types tab
image::dmn/dmn-custom-datatypes-tab.png[]

Alternately, you can also access the *Data Types* tab from the *Diagram properties* tab on the right. From the *Diagram properties* tab, click *Manage* from *Data type* under *Information item*.

.Diagram properties tab
image::dmn/dmn-diagram-properties-tab.png[]

The following tables list the `Violation`, `Driver`, and `Fine` custom data types that you will create for this project.

.Driver custom data types
[cols="1,1", options="header"]
|===
|Name |Type

|tDriver |Structure
|Name |string
|Age |number
|State |string
|City |string
|Points |number
|===

.Violation custom data types
[cols="1,1", options="header"]
|===
|Name |Type

|tViolation |Structure
|Code |string
|Date |date
|Type |string
|Speed Limit |number
|Actual Speed |number
|===

.Fine custom data types
[cols="1,1", options="header"]
|===
|Name |Type

|tFine |Structure
|Amount |number
|Points |number
|===

.Prerequisites
* You created the traffic violations DMN decision requirements diagram (DRDs) in {CENTRAL}.

.Procedure
. To create the *tDriver* custom data type, click *Add* on the *Data Types* tab, enter `tDriver` in the *Name* field, select `Structure` from the *Type* list, and click *Save*.
+
.The tDriver custom data type
image::dmn/dmn-tDriver-custom-datatype.png[]
. To create the first nested data type, enter `Name` in the *Name* field of the nested data type, select *String* from the *Type* list and click *Save*.
. For each of the remaining nested data types, click the three vertical dots next to the *tDriver* data type, select *Insert nested field*, and add the following nested data types. Click *Save* for each nested data type you add.
+
* *Name* (string)
* *Age* (number)
* *State* (string)
* *City* (string)
* *Points* (number)

. To create the *tViolation* custom data type, click *Add* on the *Data Types* tab, enter `tViolation` in the *Name* field, select `Structure` from the *Type* list, and click *Save*.
+
.The tViolation custom data type
image::dmn/dmn-tViolation-custom-datatype.png[]
. To create the first nested data type, enter `Code` in the *Name* field of the nested data type, select *String* from the *Type* list and click *Save*.
. For each of the remaining nested data types, click the three vertical dots next to the *tViolation* data type, select *Insert nested field*, and add the following nested data types. Click *Save* for each nested data type that you add.
+
* *Code* (string)
* *Date* (date)
* *Type* (string)
* *Speed Limit* (number)
* *Actual Speed* (number)

. To add the following constraints to the `Type` nested data type, click *Edit* -> *Constraints* -> *Enumeration* and add the following constraints. Click the check icon image:dmn/dmn-datatype-constraints-tickmark.png[] to save each enumeration constraint that you add.
+
* `"speed"`
* `"parking"`
* `"driving under the influence"`

. To create the *tFine* custom data type, click *Add* on the *Data Types* tab, enter `tFine` in the *Name* field, select `Structure` from the *Type* list, and click *Save*.
+
.The tFine custom data type
image::dmn/dmn-tFine-custom-datatype.png[]
. To create the first nested data type, enter `Amount` in the *Name* field of the nested data type, select *Number* from the *Type* list and click *Save*.
. For each of the remaining nested data types, click the three vertical dots next to the *tFine* data type, select *Insert nested field*, and add the following nested data types. Click *Save* for each nested data type that you add.
+
* *Amount* (number)
* *Points* (number)

. Once all the three custom data types are created, click *Save* to open the *Confirm Save* dialog box and click *Save* again.

[id='gs-dmn-gs-assigning-custom-datatypes-proc']
= Assigning custom data types to the DRD input and decision nodes

After you create the DMN custom data types, assign them to the appropriate *DMN Input Data* and *DMN Decision* nodes in the traffic violations DRD.

.Prerequisites
* You have created the traffic violations DMN custom data types in {CENTRAL}.

.Procedure
. Click the *Model* tab on the DMN designer and click *Diagram properties* in the top-right corner of the DMN designer to expose the DRD properties.
. In the DRD, select the *Driver* input data node and in the *Diagram properties* panel, set *Data type* to `tDriver`.
. Select the *Violation* input data node and set the *Data type* to `tViolation`.
. Select the *Fine* input data node and set the *Data type* to `tFine`.
. Select the *Should the driver be suspended?* decision node and set the following properties:
+
* *Data type*: `string`
* *Question*: `Should the driver be suspended due to points on his driver license?`
* *Allowed Answers*: `"Yes","No"`
. Click *Save* to open the *Confirm Save* dialog box and click *Save* again.

You have assigned the custom data types to your DRD's input and decision nodes.

[id='gs-dmn-gs-defining-decision-logic-proc']
= Defining the traffic violations DMN decision logic

To calculate the fine and to decide whether the driver is to be suspended or not, you can define the traffic violations DMN decision logic using a DMN decision table and context boxed expression.

.Fine decision table
image::dmn/dmn-gs-fine-decision-table.png[]

.Should the driver be suspended?
image::dmn/dmn-gs-context-table.png[]

.Prerequisites
* You have assigned the DMN custom data types to the appropriate decision and input nodes in the traffic violations DRD in {CENTRAL}.

.Procedure
. To calculate fine, in the DMN designer canvas, select the *Fine* decision node and click the *Edit* icon to open the DMN boxed expression designer.
. Click *Select expression* -> *Decision Table*.
. For the *Violation.Date*, *Violation.Code*, and *Violation.Speed Limit* parameter fields, right-click and select *Delete* for each field.
. Click the *Violation.Actual Speed* column header and enter the expression `Violation.Actual Speed - Violation.Speed Limit` in the *Name* field.
. Right-click the *Fine* parameter field and select either `Insert left` or `Insert right`.
. Click the *output-2* column sub-header, enter `Amount` in the *Name* field, and select `number` from the *Data Type* field.
. Similarly, click the *output-1* column sub-header, enter `Points` in the *Name* field, and select `number` from the *Data Type* field.
. Next, enter the following values in the first row of the decision table:
* *Violation.Type*: `"speed"`
* *Violation.Actual Speed - Violation.Speed Limit*: `[10..30)`
* *Amount*: `500`
* *Points*: `3`
+
Right-click the first row and select `Insert below` to add another row.
. Enter the following values in the second row of the decision table:
* *Violation.Type*: `"speed"`
* *Violation.Actual Speed - Violation.Speed Limit*: `>= 30`
* *Amount*: `1000`
* *Points*: `7`
+
Right-click the second row and select `Insert below` to add another row.
. Enter the following values in the third row of the decision table:
* *Violation.Type*: `"parking"`
* *Violation.Actual Speed - Violation.Speed Limit*: `-`
* *Amount*: `100`
* *Points*: `1`
+
Right-click the third row and select `Insert below` to add another row.
. Enter the following values in the fourth row of the decision table:
* *Violation.Type*: `"driving under the influence"`
* *Violation.Actual Speed - Violation.Speed Limit*: `-`
* *Amount*: `1000`
* *Points*: `5`
. Click *Save* to open the *Confirm Save* dialog box and click *Save* again.
. To define the driver suspension rule, return to the DMN designer canvas, select the *Should the driver be suspended?* decision node, and click the *Edit* icon to open the DMN boxed expression designer.
. Click *Select expression* -> *Context*.
. Click *ContextEntry-1*, enter `Total Points` as the *Name*, and select `number` as the *Data Type*.
. Click the cell next to *Total Points*, select `Literal Expression` from the context menu, and enter `Driver.Points + Fine.Points` as the expression.
. In the cell below *Driver.Points + Fine.Points*, select `Literal Expression` from the context menu, and enter `if Total Points >= 20 then "Yes" else "No"`.
. Click *Save* to open the *Confirm Save* dialog box and click *Save* again.
+
You have defined how to calculate the fine and the context for deciding when to suspend the driver. You can navigate to the *traffic-violation* project page and click *Build* to build the example project and address any errors noted in the *Alerts* panel.

